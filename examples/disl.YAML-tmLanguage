scopeName: source.disl
name: disl
fileTypes:
  - disl

variables:
  disl_emojis: ''
  # disl_emojis: '(?:[\u2700-\u27bf]|(?:\ud83c[\udde6-\uddff]){2}|[\ud800-\udbff][\udc00-\udfff]|[\u0023-\u0039]\ufe0f?\u20e3|\u3299|\u3297|\u303d|\u3030|\u24c2|\ud83c[\udd70-\udd71]|\ud83c[\udd7e-\udd7f]|\ud83c\udd8e|\ud83c[\udd91-\udd9a]|\ud83c[\udde6-\uddff]|\ud83c[\ude01-\uddff]|\ud83c[\ude01-\ude02]|\ud83c\ude1a|\ud83c\ude2f|\ud83c[\ude32-\ude02]|\ud83c\ude1a|\ud83c\ude2f|\ud83c[\ude32-\ude3a]|\ud83c[\ude50-\ude3a]|\ud83c[\ude50-\ude51]|\u203c|\u2049|[\u25aa-\u25ab]|\u25b6|\u25c0|[\u25fb-\u25fe]|\u00a9|\u00ae|\u2122|\u2139|\ud83c\udc04|[\u2600-\u26FF]|\u2b05|\u2b06|\u2b07|\u2b1b|\u2b1c|\u2b50|\u2b55|\u231a|\u231b|\u2328|\u23cf|[\u23e9-\u23f3]|[\u23f8-\u23fa]|\ud83c\udccf|\u2934|\u2935|[\u2190-\u21ff])'
  d: (?<=\s+|\b)
  b: (?=\s+|\b)
  disl_extends: \b(?:expands \s+ on|specializes|is \s+ an?|extends|(?:is \s+ a \s+)?kind \s+ of|of \s+ kind)\b
  disl_bullets: (?x) \|> | /> | \> | \-> | \-\-? | ⚙️ | >> | \* | \*> | =>
  disl_indent: '(?:\s|{{disl_emojis}}|{{disl_bullets}})*'
  disl_data_collections: |-
    \s+ (?:list|set|map|dictionary|collection|array) (?:\s+ of)? \s+
  disl_data_pickers: |-
    \s+ (?:one|any|some|all) (?:\s+ of)?\s+
  disl_type_modifiers: |-
    (?: \b dynamic \b)? (?: \b optional \b | \b non-empty \b | {{disl_data_pickers}}(?:\s of\b)? | {{disl_data_collections}}(?:\s of\b)? )
  disl_param_modifiers: optional
  disl_primitives: '\b(?:string|text|characters?|numbers?|array|objects?|functions?|dates?|yes\-or\-no|yes\s*\|\s*no|boolean)\b'
  disl_class_name: '\b[_A-Z][a-zA-Z0-9]++(?:\\s+[_A-Z][a-zA-Z0-9]++)*(?!=[?!|])'
  disl_constants: true|false|yes|no|null|empty|exists?|there is|there are|defined
  backtickString: (\`([^\`\\]|\\.)*\`)
  quotedStrings: (\"([^\"\\]|\\.)*\")
  # * if disl_function_name matches, it's a function name, but
  # ! it does not match all function names
  disl_function_name: '\b[_a-z]+[A-Z_]+[_\w\d]*\b'
  disl_property_name: '[a-z]+[_\w\d]*'
  disl_class_or_prop: '[_$\w][_$\w\d]*'
  disl_prop_access: |-
    (?x)(?: 's \s+  |  (?<=s)' \s+  |  \.  |  ,? \s (?:with|and) \s \.  )

  #---------------------------
  #     Disl Concepts
  #---------------------------
  disl_time: Millisecond|Second|Minute|Hour|Day|Weekday|Week|Month|Bimester|Trimester|QuarterOfYear|Semester|Year
  disl_formatted_text: Name|FirstName|LastName|FullName|EmailAddress|URL|Title|Phrase|Paragraph|Sentence|Word
  disl_numeric: Money|Percentage|Decimal|Integer
  disl_file: FileName|FileExtension|MimeType|DirectoryPath|FilePath
  disl_network: IP|IPv4|IPv6|MACAddress|DomainName|URL|Email|UserName|Password
  disl_address: StreetAddress|City|State|ZipCode|Country
  disl_phone: PhoneNumber|AreaCode|CountryCode
  disl_business: CompanyName|CompanySuffix|JobTitle
  disl_color: ColorName|HexColor|RGBColor|HSLColor
  disl_currency: CurrencyCode|CurrencyName|CurrencySymbol

  disl_concept: disl_time|disl_formatted_text|disl_numeric|disl_file|disl_network|disl_address|disl_phone|disl_business|disl_color|disl_currency
  #---------------------------

  startOfIdentifier: (?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))
  endOfIdentifier: (?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.))
  propertyAccess: (?:(\.)|(\?\.(?!\s*[[:digit:]])))
  propertyAccessPreIdentifier: \??\.\s*
  constantIdentifier: '[[:upper:]][_$[:digit:][:upper:]]*'
  propertyIdentifier: '\#?{{disl_class_or_prop}}'
  constantPropertyIdentifier: '\#?{{constantIdentifier}}'
  nonIdentifierPropertyName: '{{quotedStrings}}|(\[([^\[\]]|\[[^\[\]]*\])+\])'
  label: ({{disl_class_or_prop}})\s*(:)
  hexNumber: \b(?<!\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\b(?!\$)
  binaryNumber: \b(?<!\$)0(?:b|B)[01][01_]*(n)?\b(?!\$)
  octalNumber: \b(?<!\$)0(?:o|O)?[0-7][0-7_]*(n)?\b(?!\$)
  decimalNumber: |-
    (?<!\$)(?:
      (?:\b[0-9][0-9_]*(\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\b)| # 1.1E+3
      (?:\b[0-9][0-9_]*(\.)[eE][+-]?[0-9][0-9_]*(n)?\b)|             # 1.E+3
      (?:\B(\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\b)|             # .1E+3
      (?:\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\b)|                 # 1E+3
      (?:\b[0-9][0-9_]*(\.)[0-9][0-9_]*(n)?\b)|                      # 1.1
      (?:\b[0-9][0-9_]*(\.)(n)?\B)|                                  # 1.
      (?:\B(\.)[0-9][0-9_]*(n)?\b)|                                  # .1
      (?:\b[0-9][0-9_]*(n)?\b(?!\.))                                 # 1
    )(?!\$)
  anyNumber: ({{hexNumber}})|({{binaryNumber}})|({{octalNumber}})|({{decimalNumber}})
  # any use of property name needs to ignore line breaks in regular expression because of decimal number regex (maintained for readability)
  propertyName: ({{anyNumber}}|({{disl_class_or_prop}})|{{nonIdentifierPropertyName}})
  propertyNameWithPrivate: ({{anyNumber}}|({{propertyIdentifier}})|{{nonIdentifierPropertyName}})
  constantVar: ({{constantIdentifier}})(?![_$[:alnum:]])
  constructsAndModifiers: '(?:abstract|async|class|const|declare|enum|export|function|import|interface|let|module|namespace|returns?|type|var)\b'
  varExprStart: '{{startOfDeclaration}}\b(var|let){{endOfIdentifier}}'
  constExprStart: '{{startOfDeclaration}}\b(const(?!\s+enum\b)){{endOfIdentifier}}'
  nonPropertyLookBehind: '[^\._$[:alnum:]]'
  lookBehindReturn: '^return|{{nonPropertyLookBehind}}return'
  lookBehindThrow: '^throw|{{nonPropertyLookBehind}}throw'
  lookBehindYield: '^yield|{{nonPropertyLookBehind}}yield'
  lookBehindAwait: '^await|{{nonPropertyLookBehind}}await'
  lookBehindDefault: '^default|{{nonPropertyLookBehind}}default'
  lookBehindConst: '^const|{{nonPropertyLookBehind}}const'
  lookBehindLet: '^let|{{nonPropertyLookBehind}}let'
  lookBehindVar: '^var|{{nonPropertyLookBehind}}var'
  lookBehindIn: '^in|{{nonPropertyLookBehind}}in'
  lookBehindOf: '^of|{{nonPropertyLookBehind}}of'
  lookBehindTypeof: '^typeof|{{nonPropertyLookBehind}}typeof'
  lookBehindCase: '^case|{{nonPropertyLookBehind}}case'
  lookBehindImport: '^import|{{nonPropertyLookBehind}}import'
  lookAheadEndOfType: '[;),}\]:?\-\+\>]|\|\||\&\&|\!\=\=|$'
  matchingParenthesis: (\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))
  matchingBraces: (\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})
  matchingBrackets: (\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\])
  inlineComment: \/\*([^\*]|(\*[^\/]))*\*\/
  startOfDeclaration: '{{startOfIdentifier}}(?:(\bexport)\s+)?(?:(\bdeclare)\s+)?'
  lookBehindOfPossiblyMultilineArrowWithDestructuring: (?<=[(=,])
  lookBehindOfPossiblyMultilineArrow: (?<=[(=,]|=>|{{lookBehindReturn}})
  lookBehindOfObjectMemberPossiblyMultilineArrow: (?<=:)
  # Identifier start | matching braces | matching parenthesis | matching square brackets
  typeParamersStart: ([_$[:alpha:]]|{{matchingBraces}}|{{matchingParenthesis}}|{{matchingBrackets}})
  typeParameters: (<\s*{{typeParamersStart}}([^=<>]|=[^<]|\<\s*{{typeParamersStart}}([^=<>]|=[^<]|\<\s*{{typeParamersStart}}([^=<>]|=[^<])*\>)*\>)*>\s*)
  # Identifier start | matching braces | matching parenthesis | matching square brackets | matching strings
  typeArgumentsStart: (((keyof|infer|typeof|readonly)\s+)|(({{disl_class_or_prop}}|{{matchingBraces}}|{{matchingParenthesis}}|{{matchingBrackets}}|{{quotedStrings}})(?=\s*([\<\>\,\.\[]|=>|&(?!&)|\|(?!\|)))))
  typeArgumentsInnerExpressionPart: '[^<>\(]|{{matchingParenthesis}}|(?<==)\>'
  typeArguments: '<\s*{{typeArgumentsStart}}({{typeArgumentsInnerExpressionPart}}|\<\s*{{typeArgumentsStart}}(({{typeArgumentsInnerExpressionPart}}|\<\s*{{typeArgumentsStart}}({{typeArgumentsInnerExpressionPart}})*(?<!=)\>))*(?<!=)\>)*(?<!=)>'
  possiblyMultilineTypeArgument: (<\s*[\{\[\(]\s*$)
  function-callLookup: \s*(?:(\?\.\s*)|(\!))?(({{typeArguments}}\s*)?\()
  function-callNamedTarget: (({{disl_class_or_prop}})(\s*{{propertyAccessPreIdentifier}}({{propertyIdentifier}}))*)|({{propertyAccessPreIdentifier}}{{propertyIdentifier}})
  function-callTarget: (({{function-callNamedTarget}})|(?<=[\)]))
  possiblyMultilineCallWithTypeArguments: \s*(?:(\?\.\s*)|(\!))?{{possiblyMultilineTypeArgument}}
  possiblyType: \s*([^<>\(\)\{\}]|\<([^<>]|\<([^<>]|\<[^<>]+\>)+\>)+\>|\([^\(\)]+\)|\{[^\{\}]+\})+
  typeparamertStartOfArrow: ''
  arrowLookup: |-
    # sure shot arrow functions even if => is on new line
    (
      {{typeParameters}}?
      [(]\s*({{inlineComment}}\s*)*
      (
        ([)]\s*:) |                                                                                       # ():
        ((\.\.\.\s*)?{{disl_class_or_prop}}\s*:)                                                                  # [(]param: | [(]...param:
      )
    ) |
    {{typeparamertStartOfArrow}}
    # arrow function possible to detect only with => on same line
    (
      {{typeParameters}}?                                                                                 # typeparameters
      \(\s*({{inlineComment}}\s*)*(([_$[:alpha:]]|{{matchingBraces}}|{{matchingBrackets}}|(\.\.\.\s*[_$[:alpha:]]))([^()\'\"\`]|{{matchingParenthesis}}|{{quotedStrings}})*)?\)   # parameters
      (\s*:{{possiblyType}})?                                                                        # return type
      \s*=>                                                                                               # arrow operator
    )
  possiblyMultilineArrowExpressionBeforeEndOfLine: ((({{typeParameters}})?\()|(<)|({{typeParameters}}))
  possiblyMultilineObjectBindingPattern: '{{matchingBraces}}\s*((:\s*\{?$)|(({{possiblyType}}\s*)?=\s*))'
  possiblyMultilineArrayBindingPattern: '{{matchingBrackets}}\s*((:\s*\[?$)|(({{possiblyType}}\s*)?=\s*))'
  possiblyMultilineArrowWParamters: '((([\{\[]\s*)?$)|({{possiblyMultilineObjectBindingPattern}})|({{possiblyMultilineArrayBindingPattern}}))'
  possiblyMultilineArrowWithoutTypeParameters: '[\(]\s*{{possiblyMultilineArrowWParamters}}'
  possiblyMultilineArrow: ((<\s*$)|({{typeParameters}}?{{possiblyMultilineArrowWithoutTypeParameters}}))  # during lookup treat <typeparameters>?( followed by line end as arrow or < followed by new line
  functionOrArrowLookup: |-
    \s*(
      ((async\s+)?(
        (function\s*[(<*]) |
        (function\s+) |
        ({{disl_class_or_prop}}\s*=>)
      )) |
      ((async\s*)?(
        {{possiblyMultilineArrow}} |
        {{arrowLookup}}
      ))
    )
  functionLikeType: |-
    (:\s*(
      (<) |
      ([(]\s*(
        ([)]) |
        (\.\.\.) |
        ([_$[:alnum:]]+\s*(
          ([:,?=])|
          ([)]\s*=>)
        ))
      ))
    )) |
    (:\s*{{startOfIdentifier}}Function{{endOfIdentifier}}) |
    (:\s*{{possiblyMultilineArrow}})
  functionLikeAssignmentOrType: |-
    \s*
    # function assignment |
    (={{functionOrArrowLookup}}) |
    # typeannotation is fn type: < | () | (... | (param: | (param, | (param? | (param= | (param) =>
    {{functionLikeType}} |
    (:\s*(=>|{{matchingParenthesis}}|(<[^<>]*>)|[^<>(),=])+={{functionOrArrowLookup}})
  arrowFunctionEnd: (?==>|\{|(^\s*(export|function|class|interface|let|var|const|import|enum|namespace|module|type|abstract|declare)\s+))
  regexpTail: ([dgimsuy]+|(?![\/\*])|(?=\/\*))(?!\s*[a-zA-Z0-9_$])
  completeRegexp: \/(?![\/*])(?=(?:[^\/\\\[]|\\.|\[([^\]\\]|\\.)*\])+\/{{regexpTail}})

patterns:
  - include: '#alias'
  - include: '#default-type'
  - include: '#language-constants'
  - include: '#include-directives'
  - include: '#comments'
  - include: '#containers'
  - include: '#event'
  - include: '#command'
  - include: '#exception'
  - include: '#property-declaration'
  - include: '#it-var'
  - include: '#keyword-statements'
  - include: '#function-name'
  - include: '#list-item'
  - include: '#phrase'
  # - include: '#function-call'

repository:

  phrase:
    name: meta.phrase.disl
    end: (?=$)

    patterns:
      - include: '#function-name'
      - include: '#language-constants'
      - include: '#variable'
      - include: '#new-expression'
      - include: '#english'
      - include: '#constant-value'
      - include: '#string'
      - include: '#ts-statement'
      - include: '#property-ref'
      - include: '#parameter-ref'
      - include: '#aliasRef'
      - include: '#qualified-name'
      - include: '#type-definition'
      - include: '#collection-operations'
      - include: '#object-property-access'
      - include: '#in-phrase-keywords'
      - include: '#parameter-declaration'
      - include: '#ending-keywords'

  default-type:
    name: meta.alias.disl
    begin: (?x) ^ \s* (type) \s+ ([_\w][\w0-9]*)\s*
    beginCaptures:
      "1": { "name": "keyword.declaration.alias.disl" }
      "2": { "name": "constant.other.symbol.disl" }
    end: (?=$)
    patterns:
      -
        match: (?x) \s* (,(?:\s*and)?) \s* ([_\w][\w0-9]*)
        captures:
          "1": { "name": "punctuation.separator.comma.disl" }
          "2": { "name": "constant.other.symbol.disl" }
      -
        match: (?x) \s+ (as) \s+
        captures:
          "1": { "name": "comment.documentation.string.preposition.disl" }
      -
        include: "#parameter-declaration"
      -
        include: "#type-definition"
  alias:
    name: meta.alias.disl
    begin: (?x) ^ \s* (alias) \s+ ([_\w][\w0-9]*)\s*
    beginCaptures:
      "1": { name: "keyword.declaration.alias.disl" }
      "2": { name: "constant.other.symbol.disl" }
    end: (?=$)
    patterns:
      - match: (?x) \s* (,(?:\s*and)?) \s* ([_\w][\w0-9]*)
        captures:
          1:
            name: punctuation.separator.comma.disl
          2:
            name: constant.other.symbol.disl
      - match: (?x)\s+ (to) \s+
        captures:
          "1": { name: "comment.documentation.string.preposition.disl" }

      - match: (alias)\s*(:)
        captures:
          "1": { name: "keyword.declaration.alias.disl" }
          "2": { name: "punctuation.separator.colon.disl" }

      - include: "#parameter-declaration"
      - include: "#type-definition"

  ending-keywords:
    name: keyword.other.ending.disl
    match: (with|params):$

  function-name:
    name: meta.function-name.disl
    match: '(?x)(?:
              (\b{{disl_property_name}})({{disl_bullets}})
            | ({{disl_bullets}})({{disl_property_name}})
            | ({{disl_bullets}})\s?({{disl_property_name}})\s?({{disl_bullets}})
            )'
    captures:
      '1': { name: variable.function.disl }
      '2': { name: keyword.other.declaration.function.disl }
      '3': { name: keyword.other.declaration.function.disl }
      '4': { name: variable.function.disl }
      '5': { name: keyword.other.declaration.function.disl }
      '6': { name: variable.function.disl }
      '7': { name: keyword.other.declaration.function.disl }

  function-call:
    name: meta.statement.function-call.disl
    match: |-
      (?x)(?:^)
        ({{disl_indent}}) (run\s|call\s)? ({{disl_class_or_prop}})(?=\s)
    # end: (?=[^_\w0-9])
    captures:
      '1': { name: keyword.other.declaration.function.disl }
      '2': { name: keyword.other.declaration.function.disl }
      '3': { name: variable.function.disl }

  language-constants:
    patterns:
      - name: constant.language.disl
        match: \b(?:{{disl_constants}})\b

      - name: constant.numeric.disl
        match: (\b\d+)

  keyword-statements:
    name: meta.keyword.statement.disl

    patterns:
      - include: '#it-var'

      - name: meta.storage.type.disl meta.declaration.disl
        match: \b(domain)\s+({{disl_class_name}})\b
        captures:
          '1': {name: storage.type.domain.disl keyword.declaration.domain.disl}
          '2': {name: entity.name.class.domain.disl}

      - name: meta.storage.type.disl meta.declaration.disl
        match: ^\s*(context)\s+({{disl_class_name}})\b
        captures:
          '1': {name: storage.type.domain.disl keyword.declaration.domain.disl}
          '2': {name: entity.name.class.domain.disl}

      - name: entity.name.function.constructor.disl
        match: '(?x) {{disl_indent}}? \s* \brecipe(:)?'
        captures:
          '1': {name: punctuation.separator.colon.disl}

      - name: keyword.control.throw.disl
        begin: '(?:^|\G)(\s*)(throw|reject\s+(?:saying|because)?|(?:show\s+)?\berror)(.*)'
        end: (?=$)
        beginCaptures:
          '1':
            patterns:
              - include: '#english'
              - include: '#disl_indent'
          '2': { name: keyword.control.throw.disl }
          '3':
            patterns:
            - include: '#string'

      - name: meta.keyword.statement.lazy.disl
        begin: |-
          (?xi) (?:^|\G) {{disl_indent}}
          (\b(?:depends on|when|on|if|else|for(\s+ each)?|let|returns?|purpose|enum)\b:?)
        end: (?=\Z)
        beginCaptures:
          '1': { name: keyword.other.everything-else.disl }
        patterns:
          - include: '#phrase'

      - name: meta.list-keywords.disl
        # Must appear at the end of the line
        match: (list|stories|recipe|params|rules|with):\s*(?=$)
        captures:
          '1': { name: punctuation.definition.list.begin.disl keyword.other.parameter-list.disl }


  it-var:
    name: meta.variable.language.disl
    match: (?i)\b(it)(?=\s*\.|'s)
    captures:
      '1': { name: variable.language.disl }
      '2': { name: punctuation.accessor.disl keyword.other.access.possessive.disl }

  list-item:
    name: meta.structure.list.disl
    begin: (?x)(?:^|\G)\s+(\> | \- | \|\-> | \|=> | \-\-> | ==> | \|\-\-)\s+
    while: (?x)(?:^|\G)\s+(\> | \- | \|\-> | \|=> | \-\-> | ==> | \|\-\-)\s+
    captures:
      '1': { name: punctuation.separator.list.disl  keyword.declaration.list.item.disl }
      #
    patterns:
      - include: '#file-path'
      - include: '#phrase'

  file-path:
    name: meta.structure.list.file-path.disl
    match: ([\w\d\s\.]*/+[\w\d\s/\.]+)+
    captures:
      '1': { name: string.unquoted.disl }

  include-directives:
    name: meta.import.disl
    match: (?:^|\G)\s*(see also|read also|read_also|import|include|references)(.*)(?=\n)
    captures:
      '1': { name: keyword.control.import.disl keyword.operator.expression.import.disl }
      '2': { name: string.unquoted.disl }

  comments:
    patterns:
      - name: comment.line.double-slash.disl
        match: (//.*)

      - name: comment.block.documentation.ts
        begin: /\*\*(?!/)
        beginCaptures:
          '0': { name: punctuation.definition.comment.ts }
        end: \*/
        endCaptures:
          '0': { name: punctuation.definition.comment.ts }
        patterns:
          - include: 'source.ts#docblock'

      - name: comment.block.ts
        begin: (/\*)(?:\s*((@)internal)(?=\s|(\*/)))?
        beginCaptures:
          '1': { name: punctuation.definition.comment.ts }
          '2': { name: storage.type.internaldeclaration.ts }
          '3': { name: punctuation.decorator.internaldeclaration.ts }
        end: \*/
        endCaptures:
          '0': { name: punctuation.definition.comment.ts }

  aliasRef:
    name: constant.other.symbol.disl
    match: (:{{disl_class_or_prop}})

  type-definition:
    name: meta.type-definition.disl
    patterns:
      - include: '#language-constants'

      - name: meta.type-definition.primitive.disl
        match: (?x)({{disl_type_modifiers}})?\s*({{disl_primitives}})(\[\s*\])?
        captures:
          '1': {name: storage.modifier.disl}
          '2': {name: support.type.primitive.disl}
          '3': {name: meta.brace.square.disl}

      - name: meta.type-definition.class.disl
        match:  (?x)({{disl_type_modifiers}})?\s*({{disl_class_name}})(\[\s*\])?
        captures:
          '1': {name: storage.modifier.disl}
          '2': {name: entity.name.type.class.disl}
          '3': {name: meta.brace.square.disl}

  collection-operations:
    name: meta.collection-operations.disl
    # //  \^ @ \[ ]
    match: (?x) ({{disl_data_pickers}} | {{disl_data_collections}} |\s){1,3}
    captures:
      '1': { name: storage.modifier.disl }
      '2': { name: storage.modifier.disl }
      '3': { name: storage.modifier.disl }

  containers:
    name: meta.namespace.disl
    patterns:
      - name: meta.namespace.declaration.disl
        match: (?x)(?:^|\G)\s*(domain|app) \s+ ({{disl_class_name}})
        captures:
          '1': {name: keyword.declaration.container.disl meta.group}
          '2': {name: entity.name.type.package.disl meta.group.name}

      - name: meta.namespace.declaration.disl
        match: (?x)(?:^|\G)\s*(context) \s+ ({{disl_class_name}})
        captures:
          '1': { name: keyword.declaration.container.disl }
          '2': { name: entity.name.type.module.disl meta.group.name }

      - name: meta.namespace.group.disl
        match: '(?x)(?:^|\G)\s*(area|section|aggregate|module|group|unit|troupe) \s+ ({{disl_class_name}}) (?:\s+ ({{disl_extends}}) \s+ (?: ({{disl_concept}}) | ({{disl_class_name}}) ) )?'
        captures:
          '1': {name: keyword.declaration.namespace.disl}
          '2': {name: entity.name.section.disl }
          '3': {name: keyword.operator.word.disl }
          '4': {name: support.class.disl entity.other.inherited-class.disl}
          '5': {name: entity.other.inherited-class.disl}

      - name: meta.namespace.controller.disl
        match: '(?x)(?:^|\G)\s*(root|main entity|manager|leader|director) \s+ ({{disl_class_name}}) (?:\s+ ({{disl_extends}}) \s+ (?: ({{disl_concept}}) | ({{disl_class_name}}) ) )?'
        captures:
          '1': {name: keyword.declaration.namespace.disl}
          '2': {name: entity.name.type.class.controller.disl meta.group.name}
          '3': {name: keyword.operator.word.disl }
          '4': {name: support.class.disl entity.other.inherited-class.disl}
          '5': {name: entity.other.inherited-class.disl}

      - name: meta.namespace.participant.disl
        match: '(?x)(?:^|\G)\s*(entity|agent|model|member|actor|player) \s+ ({{disl_class_name}}) (?:\s+ ({{disl_extends}}) \s+ (?: ({{disl_concept}}) | ({{disl_class_name}}) ) )?'
        captures:
          '1': {name: keyword.declaration.namespace.disl}
          '2': {name: entity.name.type.class.participant.disl meta.group.name}
          '3': {name: keyword.operator.word.disl }
          '4': {name: support.class.disl entity.other.inherited-class.disl}
          '5': {name: entity.other.inherited-class.disl}

      - name: meta.declaration.concept.disl
        match: '(?x)(?:^)\s*(concept) \s+ ({{disl_class_name}}) (?:\s+ ({{disl_extends}}) \s+ (?: ({{disl_concept}}) | ({{disl_class_name}}) ) )?'
        captures:
          '1': {name: storage.type.class.disl keyword.declaration.class.disl }
          '2': {name: entity.name.class.disl entity.name.type.class.disl}
          '3': {name: keyword.operator.word.disl }
          '4': {name: support.class.disl entity.other.inherited-class.disl}
          '5': {name: entity.other.inherited-class.disl}

      - name: meta.namespace.concept.disl
        match: (?x)(?:^|\G)\s*(repository|service) \s+ ({{disl_class_name}})
        captures:
          '1': {name: keyword.declaration.class.disl}
          '2': {name: entity.name.type.interface.disl meta.group.name}

  command:
    name: meta.class.command.disl
    match: |-
      (?x)
        (^{{disl_indent}})?
        ((?:on\s)? command|receive|publish)? \s+
        ({{disl_class_name}})(\?)

    captures:
      '1': {name: keyword.declaration.class.disl}
      '2': {name: keyword.declaration.class.disl}
      '3': {name: entity.name.type.class.command.disl}
      '4': {name: keyword.declaration.class.disl}

  event:
    name: meta.class.event.disl
    match: |-
      (?x)
        (^{{disl_indent}})?
        ((?:on\s)? event|receive|publish)? \s+
        ({{disl_class_name}})(\!)

    captures:
      '1': {name: keyword.declaration.class.disl}
      '2': {name: keyword.declaration.class.disl}
      '3': {name: entity.name.type.class.event.disl}
      '4': {name: keyword.declaration.class.disl}

  exception:
    name: meta.class.exception.disl
    match: '((?:\!)(?:{{disl_class_name}}))'
    captures:
      '1': {name: entity.name.type.class.exception.disl}

  new-expression:
    name: meta.expression.new.disl
    match: '(?x)\b (new) \s+
                  (?:
                  | ({{disl_class_name}})+
                  | (\$)({{disl_class_name}})+
                  | (\[)\s?({{disl_class_name}})(\])
                  )
                  ({{disl_prop_access}})?'
    captures:
      '1': { name: keyword.operator.new.disl }
      '2': { name: entity.name.type.class.disl variable.disl }
      '3': {name: punctuation.definition.variable.disl }
      '4': { name: entity.name.type.class.disl variable.disl }
      '5': {name: punctuation.definition.variable.disl }
      '6': { name: entity.name.type.class.disl variable.disl }
      '7': {name: punctuation.definition.variable.disl}
      '8': { name: punctuation.accessor.disl keyword.other.access.possessive.disl }

  variable:
    name: meta.variable.disl
    match: '(?x) (?: (\$)({{disl_class_or_prop}}) | (\[) ([\w_\s]+) (\]) )'
    captures:
      '1': { name: punctuation.definition.variable.disl }
      '2': { name: variable.disl }
      '3': { name: punctuation.definition.variable.disl }
      '4': {name: variable.disl }
      '5': {name: punctuation.definition.variable.disl }


  qualified-name:
    name: meta.qualified-name.disl
    patterns:
      - name: entity.name.type.namespace
        match: '\b(\w+(?:\.\w+)+)\b'
        captures:
          '1':
            patterns:
              - match: '\.'
                name: punctuation.separator

              - match: '\b(\w+)(?!\.)\b'
                name: entity.name.type.class

  property-declaration:
    name: meta.declaration.property.disl
    begin: '(?:^\s+)(@)({{disl_class_or_prop}})\s?(:)?'
    end: (?=$)
    beginCaptures:
      '1': { name: punctuation.definition.variable.disl }
      '2': { name: variable.other.member.disl }
      '3': { name: punctuation.separator.colon.disl }
    patterns:
      - include: '#ts-statement'
      - include: '#type-definition'
      - include: '#qualified-name'
      - include: '#string'

  property-ref:
    name: meta.reference.property.disl
    match: (@)({{disl_class_or_prop}})
    captures:
      '1': { name: punctuation.definition.variable.disl }
      '2': { name: variable.other.member.disl }
    patterns:
      - include: '#object-property-access'
      - include: '#phrase'

  parameter-declaration:
    name: meta.parameter.definition.disl
    match: ({{disl_class_or_prop}})\s?(:)(.++(?=$))
    captures:
      '1': { name: variable.parameter.disl }
      '2': { name: punctuation.separator.colon.disl }
      '3':
        patterns:
          - include: '#ts-statement'
          - include: '#type-definition'

  parameter-ref:
    name: variable.parameter.disl
    match: (\^{{disl_class_or_prop}})

  object-property-access:
    name: meta.object.property.disl
    match: ({{disl_prop_access}})({{disl_property_name}})
    while: ({{disl_prop_access}})({{disl_property_name}})
    captures:
      '1': { name: punctuation.accessor.disl keyword.other.access.possessive.disl }
      '2': { name: variable.other.object.property.disl }

  constant-value:
    name: constant.other.literal.disl
    match: (\b[_A-Z]+\b)(:)?
    captures:
      '1': { name: constant.other.literal.disl }
      '2': { name: punctuation.separator.colon.disl }

  english:
    name: meta.english-words.disl
    patterns:
      - name: comment.documentation.string.article.disl
        match: |-
          \b(?:a|an|the)\b

      - name: comment.documentation.string.preposition.disl,
        match: |-
          \b(?:about|above|across|after|against|along|among|around|at|behind|below|beneath|beside|between|beyond|by|down|during|except|for|from|in|inside|into|like|near|of|off|on|onto|out|outside|over|past|since|through|throughout|till|to|toward|under|until|up|upon|with|within|without)\b

      - name: comment.documentation.string.referring-determiner.disl,
        match: |-
          \b(?:there|that|these|those)\b

      - name: comment.documentation.string.quantifying-determiner.disl,
        match: |-
          \b(?:all|another|any|both|each|either|enough|every|few|little|many|neither|none|one|other|several|some)\b

      - name: comment.documentation.string.conjunction.disl,
        match: |-
          \b(?:and|but|or|nor|for|so|yet)\b

      - name: comment.documentation.string.interjection.disl
        match: |-
          \b(?:ah|alas|argh|bah|boo|hah|hmm|oh|ouch|ow|uh|uh-oh|um|well|whoa|wow|yikes|yow)\b

      - name: comment.documentation.string.pronoun.disl
        match: |-
          \b(?:I|me|my|mine|we|us|our|ours|you|your|yours|he|him|his|she|her|hers|it|its|they|them|their|theirs|myself|ourselves|yourself|yourselves|himself|herself|itself|themselves)\b

      #  MOVED TO OPERATORS
      # Be
      # - name: comment.documentation.string.auxiliary-verbs.disl
      #   match: \b(?:(?:am|is|are)|(?:was|were)|(?:have|has) been|had been|(?:will|shall) be|will have been)\b


      # Have:
      - name: comment.documentation.string.auxiliary-verbs.disl
        match: |-
          \b(?:(?:have|has)|had|(?:have|has) (?:had|been)|had had|(?:will|shall) have|will have had)\b

      # Do:
      - name: comment.documentation.string.auxiliary-verbs.disl
        match: |-
          \b(?:(?:do|does)|did|(?:have|has) (?:done|been doing)|had done|(?:will|shall) do|will have done)\b

      # Will:
      - name: comment.documentation.string.auxiliary-verbs.disl
        match: |-
          \b(?:will|would|(?:have|has) (?:been|will)|had (?:been|will)|will|will have (?:been|will))\b

      # Shall:
      - name: comment.documentation.string.auxiliary-verbs.disl
        match: |-
          \b(?:shall|should|(?:have|has) (?:been|shall)|had (?:been|shall)|shall|will have (?:been|shall))\b


  in-phrase-keywords:
    name: meta.operator.in-phrase.disl
    # begin: ''
    end: (?=$)
    patterns:
      - include: '#it-var'

      - name: keyword.operator.logical.disl
        match: (?x)\b( \|\| | && | or | and | not )\b

      - name: keyword.operator.instanceof.disl
        match: '(?x)\b( ( is | to \s+ be ) \s+ ( a | an ))\b'

      - name: keyword.operator.arithmetic.disl
        match: (?x)( \+ | \- | \* | / | % )|(\+\+ | \-\-)|( \+= | \-= | \*= | /= | %= )

      - name: keyword.operator.comparison.disl
        match: (?x)( == | \!= | === | \!== | > | < | >= | <= )

      - name: keyword.operator.comparison.being.disl
        match: '\b(?:(?:am|are)|(?:was|were)|(?:have|has) been|had been|(?:will|shall) be|will have been)\b'

      - name: keyword.operator.assignment.disl
        match: (?x)( = | \+= | \-= | \*= | /= )

      - name: keyword.operator.comparison.equals.disl
        match: (?x)'\b ( equals | (is | are)? \s+ equal \s+ to? )\b'

      - name: keyword.operator.comparison.disl
        match: (?x)\b( less | lower | more | greater) \s+ than (\s+ or \s+ equal \s+ to)?\b

      - name: meta.expression.comparison.adjective.disl
        match: (?x) \b(is) \s+ (not \s+)? (?={{disl_constants}})\b
        captures:
          '1': { name: keyword.operator.comparison.disl }
          '2': { name: keyword.operator.logical.disl }
          '3': { name: support.type.primitive.disl }

      - name: comment.documentation.string.phrasal-verbs.disl,
        match: \b(do|does)\s+(not\s+)?(exist)\b
        captures:
          '1': { name: comment.documentation.string.phrasal-verb.disl }
          '2': { name: keyword.operator.logical.disl }
          '3': { name: support.type.primitive.disl }

      - name: "keyword.operator.expression.in.disl"
        match: \b(in)\b

      - name: keyword.operator.expression.equals.disl
        match: \b(be(\s+the)?)\b

      - name: keyword.operator.expression.of
        match: \b(of)\b

      - name: constant.language.boolean
        match: \b(true|false)\b

  ts-statement:
    match: (\$[<|>|-|=])(.*)
    # contentName:
    captures:
      '1':
        name: keyword.disl
      '2':
        name: meta.embedded.expression.typescript
        patterns:
          - include: source.ts

  string:
    patterns:
      - include: '#qstring-double'
      - include: '#template'

  qstring-double:
    name: string.quoted.double.ts
    begin: '"'
    beginCaptures:
      '0': { name: punctuation.definition.string.begin.ts }
    end: '(")|((?:[^\n])$)'
    endCaptures:
      '1': { name: punctuation.definition.string.end.ts }
      '2': { name: invalid.illegal.newline.ts }
    patterns:
      - include: '#string-character-escape'

  string-character-escape:
    name: constant.character.escape.ts
    match: \\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}|u\{[0-9A-Fa-f]+\}|[0-2][0-7]{0,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.|$)

  template:
    patterns:
      - include: '#template-call'
      - name: string.template.ts
        begin: '({{disl_class_or_prop}})?(`)'
        beginCaptures:
          '1': { name: entity.name.function.tagged-template.ts }
          '2': { name: punctuation.definition.string.template.begin.ts }
        end: '`'
        endCaptures:
          '0': { name: punctuation.definition.string.template.end.ts}
        patterns:
          - include: '#template-substitution-element'
          - include: '#string-character-escape'

  template-call:
    patterns:
      - name: string.template.ts
        begin: (?=(({{disl_class_or_prop}}\s*{{propertyAccessPreIdentifier}})*|({{propertyAccessPreIdentifier}})?)({{disl_class_or_prop}})({{typeArguments}}\s*)?`)
        end: (?=`)
        patterns:
          - begin: (?=(({{disl_class_or_prop}}\s*{{propertyAccessPreIdentifier}})*|({{propertyAccessPreIdentifier}})?)({{disl_class_or_prop}}))
            end: (?=({{typeArguments}}\s*)?`)
            patterns:
              - include: source.ts#support-function-call-identifiers
              - name: entity.name.function.tagged-template.ts
                match: ({{disl_class_or_prop}})
          - include: source.ts#type-arguments
      - name: string.template.ts
        begin: ({{disl_class_or_prop}})?\s*(?=({{typeArguments}}\s*)`)
        beginCaptures:
          '1': { name: entity.name.function.tagged-template.ts }
        end: (?=`)
        patterns:
          - include: source.ts#type-arguments

  template-substitution-element:
    name: meta.template.expression.ts
    contentName: meta.embedded.line.ts
    begin: \$\{
    beginCaptures:
      '0': { name: punctuation.definition.template-expression.begin.ts }
    end: \}
    endCaptures:
      '0': { name: punctuation.definition.template-expression.end.ts }
    patterns:
      - include: source.ts#expression
