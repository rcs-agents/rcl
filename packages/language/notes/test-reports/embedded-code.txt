bun test v1.2.18 (0d4089ea)

tests/grammar/embedded-code.test.ts:
21 |     description: "Test agent"
22 |     calculation: $js> RclUtil.format('dash_case', context.selectedOption.text)`;
23 | 
24 |       const result = parser.parse(input);
25 | 
26 |       expect(result.errors).toHaveLength(0);
                                 ^
error: expect(received).toHaveLength(expected)

Expected length: 0
Received length: 1

      at <anonymous> (/home/ubuntu/rcl/packages/language/tests/grammar/embedded-code.test.ts:26:29)
(fail) RCL Embedded Code Storage > Single-line Embedded Expressions > should parse $js> single-line expressions [3.00ms]
41 | 
42 |     it('should parse $ts> single-line expressions', () => {
43 |       const input = `agent Config Agent:
44 |     typeCalculation: $ts> calculateUserType(user.preferences)`;
45 |       const result = parser.parse(input);
46 |       expect(result.errors).toHaveLength(0);
                                 ^
error: expect(received).toHaveLength(expected)

Expected length: 0
Received length: 1

      at <anonymous> (/home/ubuntu/rcl/packages/language/tests/grammar/embedded-code.test.ts:46:29)
(fail) RCL Embedded Code Storage > Single-line Embedded Expressions > should parse $ts> single-line expressions [1.00ms]
54 | 
55 |     it('should parse $> style expressions as JavaScript (default language)', () => {
56 |       const input = `agent Config Agent:
57 |     typeCalculation: $> user.preferences.length > 0 ? "premium" : "basic"`;
58 |       const result = parser.parse(input);
59 |       expect(result.errors).toHaveLength(0);
                                 ^
error: expect(received).toHaveLength(expected)

Expected length: 0
Received length: 1

      at <anonymous> (/home/ubuntu/rcl/packages/language/tests/grammar/embedded-code.test.ts:59:29)
(fail) RCL Embedded Code Storage > Single-line Embedded Expressions > should parse $> style expressions as JavaScript (default language) [1.00ms]
72 |     typeCalculation: $js>>> {
73 |       // multi-line
74 |       return user.preferences.length > 0 ? "premium" : "basic";
75 |     }`;
76 |       const result = parser.parse(input);
77 |       expect(result.errors).toHaveLength(0);
                                 ^
error: expect(received).toHaveLength(expected)

Expected length: 0
Received length: 4

      at <anonymous> (/home/ubuntu/rcl/packages/language/tests/grammar/embedded-code.test.ts:77:29)
(fail) RCL Embedded Code Storage > Multi-line Embedded Code Blocks > should parse $js> multi-line code blocks [1.00ms]
93 |       return 42;
94 |     }`;
95 | 
96 |       const result = parser.parse(input);
97 | 
98 |       expect(result.errors).toHaveLength(0);
                                 ^
error: expect(received).toHaveLength(expected)

Expected length: 0
Received length: 6

      at <anonymous> (/home/ubuntu/rcl/packages/language/tests/grammar/embedded-code.test.ts:98:29)
(fail) RCL Embedded Code Storage > Multi-line Embedded Code Blocks > should handle multi-line blocks without explicit language (defaults to js) [1.00ms]
Parser errors: [
  {
    message: "Agent must have at least one flow section",
    line: 4,
    column: 1,
    offset: 59,
  }, {
    message: "Agent messages section is required",
    line: 4,
    column: 1,
    offset: 59,
  }
]
118 | 
119 |       const result = parser.parse(input);
120 |       if (result.errors.length !== 0) {
121 |         console.log('Parser errors:', result.errors);
122 |       }
123 |       expect(result.errors).toHaveLength(0);
                                  ^
error: expect(received).toHaveLength(expected)

Expected length: 0
Received length: 2

      at <anonymous> (/home/ubuntu/rcl/packages/language/tests/grammar/embedded-code.test.ts:123:29)
(fail) RCL Embedded Code Storage > Embedded Code in Flow Rules > should parse embedded expressions in flow rule parameters [1.00ms]
157 |     priority: 5
158 |     script: $ts> formatData(context.data)`;
159 | 
160 |       const result = parser.parse(input);
161 | 
162 |       expect(result.errors).toHaveLength(0);
                                  ^
error: expect(received).toHaveLength(expected)

Expected length: 0
Received length: 1

      at <anonymous> (/home/ubuntu/rcl/packages/language/tests/grammar/embedded-code.test.ts:162:29)
(fail) RCL Embedded Code Storage > Mixed Embedded Code and Regular Values > should handle sections with both embedded code and regular values
(pass) RCL Embedded Code Storage > Error Handling > should handle malformed embedded expressions gracefully [1.00ms]

 1 pass
 7 fail
 8 expect() calls
Ran 8 tests across 1 file. [167.00ms]
