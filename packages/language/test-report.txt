bun test v1.2.18 (0d4089ea)

tests/error-handling/parser-errors.test.ts:
(pass) RCL Parser Error Handling Tests > Lexer Error Recovery > handles invalid characters gracefully [5.79ms]
(pass) RCL Parser Error Handling Tests > Lexer Error Recovery > recovers from unterminated strings [0.69ms]
(pass) RCL Parser Error Handling Tests > Lexer Error Recovery > handles mixed indentation errors [0.34ms]
(pass) RCL Parser Error Handling Tests > Lexer Error Recovery > handles unicode and special characters [1.46ms]
(pass) RCL Parser Error Handling Tests > Parser Error Recovery > recovers from missing colons [0.90ms]
(pass) RCL Parser Error Handling Tests > Parser Error Recovery > recovers from incomplete section definitions [0.71ms]
(pass) RCL Parser Error Handling Tests > Parser Error Recovery > recovers from malformed import statements [0.56ms]
(pass) RCL Parser Error Handling Tests > Parser Error Recovery > recovers from malformed flow rules [0.91ms]
(pass) RCL Parser Error Handling Tests > Parser Error Recovery > recovers from nested section errors [0.78ms]
(pass) RCL Parser Error Handling Tests > Specific Error Cases > handles missing section names [0.26ms]
(pass) RCL Parser Error Handling Tests > Specific Error Cases > handles invalid property assignments [0.59ms]
(pass) RCL Parser Error Handling Tests > Specific Error Cases > handles unclosed brackets and parentheses [0.27ms]
(pass) RCL Parser Error Handling Tests > Specific Error Cases > handles extremely malformed input [0.31ms]
(pass) RCL Parser Error Handling Tests > Error Position and Context > reports accurate error positions [0.12ms]
(pass) RCL Parser Error Handling Tests > Error Position and Context > provides helpful error messages [0.29ms]
(pass) RCL Parser Error Handling Tests > Error Position and Context > reports multiple errors without stopping [0.28ms]
(pass) RCL Parser Error Handling Tests > Edge Cases and Boundary Conditions > handles empty file gracefully [0.02ms]
(pass) RCL Parser Error Handling Tests > Edge Cases and Boundary Conditions > handles whitespace-only file [0.02ms]
(pass) RCL Parser Error Handling Tests > Edge Cases and Boundary Conditions > handles very large input [32.35ms]
Deep nesting errors: [
  "Section content parsing error: Error: Unexpected token: \n", "Section content parsing error: Error: Unexpected token: \n",
  "Section content parsing error: Error: Unexpected token: \n", "Section content parsing error: Error: Unexpected token: \n",
  "Section content parsing error: Error: Unexpected token: \n", undefined, undefined,
  undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined,
  undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined
]
(pass) RCL Parser Error Handling Tests > Edge Cases and Boundary Conditions > handles deeply nested structures [5.81ms]

tests/grammar/import-enhancements.test.ts:
(pass) RCL Import Statement Enhancements > Basic Import Statements (Already Working) > should parse simple import statements [0.51ms]
(pass) RCL Import Statement Enhancements > Basic Import Statements (Already Working) > should parse import statements with aliases [0.13ms]
(pass) RCL Import Statement Enhancements > Namespace Imports with Spaces > should parse namespace imports with spaces in names [0.17ms]
(pass) RCL Import Statement Enhancements > Namespace Imports with Spaces > should parse multi-level namespace paths [0.14ms]
(pass) RCL Import Statement Enhancements > Namespace Imports with Spaces > should parse complex namespace with spaces and alias [0.09ms]
(pass) RCL Import Statement Enhancements > Edge Cases and Error Handling > should handle namespace paths without alias [0.02ms]
(pass) RCL Import Statement Enhancements > Edge Cases and Error Handling > should handle single namespace with spaces [0.03ms]
(pass) RCL Import Statement Enhancements > Edge Cases and Error Handling > should handle imports without source [0.10ms]
(pass) RCL Import Statement Enhancements > Mixed Import Statements > should parse multiple different import types [0.09ms]
(pass) Import Resolution Logic > should resolve a simple file import (case-insensitive) [4.84ms]
(pass) Import Resolution Logic > should resolve a multi-level namespace to a file [1.10ms]
(pass) Import Resolution Logic > should resolve a section in a parent file [1.20ms]
(pass) Import Resolution Logic > should throw on ambiguity (multiple files) [2.04ms]
(pass) Import Resolution Logic > should throw if not found [0.69ms]
(pass) Import Resolution Logic > should use project root detection [1.30ms]
(pass) Import Resolution Logic > should work in web environment with filesystem mock [0.54ms]
(pass) Import Resolution Logic > should fallback gracefully when files dont exist in web environment [0.14ms]

tests/grammar/rcl-custom-lexer.test.ts:
RCL Custom Lexer Test Suite
============================

=== Testing Basic Tokenization ===
Input: agent Test Agent
  displayName: "My Test Agent"
  brandName: "Test Brand"
Tokens:
  0: agent = "agent" (1:1-1:6)
  1: WS = " " (1:6-1:7)
  2: IDENTIFIER = "Test Agent" (1:7-1:17)
  3: NL = "
" (1:17-2:1)
  4: INDENT = "" (2:1-2:1)
  5: ATTRIBUTE_KEY = "displayName" (2:3-2:14)
  6: COLON = ":" (2:14-2:15)
  7: WS = " " (2:15-2:16)
  8: STRING = ""My Test Agent"" (2:16-2:31)
  9: NL = "
" (2:31-3:1)
  10: ATTRIBUTE_KEY = "brandName" (3:3-3:12)
  11: COLON = ":" (3:12-3:13)
  12: WS = " " (3:13-3:14)
  13: STRING = ""Test Brand"" (3:14-3:26)
  14: DEDENT = "" (3:26-3:26)

=== Testing Indentation ===
Input: agent Test Agent
  displayName: "Test"
  flow Welcome Flow
    :start -> "Hello"
    "Hello" -> :end
Tokens (focusing on INDENT/DEDENT):
  0: agent = "agent"
  2: IDENTIFIER = "Test Agent"
  4: INDENT = ""
  8: STRING = ""Test""
  10: flow = "flow"
  12: IDENTIFIER = "Welcome Flow"
  14: INDENT = ""
  15: ATOM = ":start"
  19: STRING = ""Hello""
  21: STRING = ""Hello""
  25: ATOM = ":end"
  26: DEDENT = ""
  27: DEDENT = ""

=== Testing Embedded Expressions ===
Input: agent Test Agent
  displayName: $js> "Hello " + context.user.name
  description: $ts> calculateDescription(context)
Expression tokens:
  8: EMBEDDED_CODE = "$js> "Hello " + context.user.name"
  13: EMBEDDED_CODE = "$ts> calculateDescription(context)"

=== Testing Type Tags ===
Input: contact:
  email: <email user@example.com>
  phone: <phone +1234567890>
  website: <url https://example.com>
Type-related tokens:
  4: email = "email"
  7: LT = "<"
  8: email = "email"
  15: GT = ">"
  17: phone = "phone"
  20: LT = "<"
  21: phone = "phone"
  24: GT = ">"
  29: LT = "<"
  30: url = "url"
  39: GT = ">"

=== Testing Keywords ===
Input: config:
  enabled: True
  debug: False
  cache: Null
  timeout: None
Keyword tokens:
  0: ATTRIBUTE_KEY = "config"
  4: ATTRIBUTE_KEY = "enabled"
  7: True = "True"
  9: ATTRIBUTE_KEY = "debug"
  12: False = "False"
  14: ATTRIBUTE_KEY = "cache"
  17: Null = "Null"
  19: ATTRIBUTE_KEY = "timeout"
  22: None = "None"

=== Testing Message Shortcuts ===
Input: messages Messages
  text "Welcome to our service!"
  richCard "Product Info"
    description: "Our latest product"
  reply "Get Started"
  dial "Call Support" <phone +1234567890>
Shortcut-related tokens:
  5: text = "text"
  7: STRING = ""Welcome to our service!""
  9: richCard = "richCard"
  11: STRING = ""Product Info""
  17: STRING = ""Our latest product""
  20: reply = "reply"
  22: STRING = ""Get Started""
  24: dial = "dial"
  26: STRING = ""Call Support""
  29: phone = "phone"

=== Testing Space-Separated Identifiers ===
Input: agent BMW Customer Service
  flow Contact Support Flow
  agentMessage Welcome Message
    text "Hello from BMW Customer Service"
Identifier tokens:
  2: IDENTIFIER = "BMW Customer Service"
  7: IDENTIFIER = "Contact Support Flow"
  11: IDENTIFIER = "Welcome Message"

=== Testing Error Handling ===
Input: agent Test Agent
  displayName: "Unclosed string
  invalidChar: @#$%
Errors:
  0: Unterminated string literal: "Unclosed string at line 2, column 16

Test suite completed!
(pass) RclLexer > Basic Tokenization > should tokenize keywords correctly [0.31ms]
(pass) RclLexer > Basic Tokenization > should tokenize boolean literals [0.12ms]
(pass) RclLexer > Basic Tokenization > should tokenize null literals [0.05ms]
(pass) RclLexer > Basic Tokenization > should tokenize type names [0.07ms]
(pass) RclLexer > Basic Tokenization > should tokenize punctuation [0.25ms]
(pass) RclLexer > Basic Tokenization > should tokenize strings and numbers [0.08ms]
(pass) RclLexer > Indentation Handling > should handle basic indentation [0.09ms]
(pass) RclLexer > Indentation Handling > should handle multiple indent levels [0.19ms]
Mixed tabs/spaces debug:
Errors:
(pass) RclLexer > Indentation Handling > should handle mixed spaces and tabs gracefully [0.11ms]
(pass) RclLexer > Comments > should tokenize single-line comments [0.07ms]
(pass) RclLexer > Comments > should handle comments with special characters [0.02ms]
(pass) RclLexer > Expressions > should tokenize single-line expressions [0.05ms]
(pass) RclLexer > Multi-line Strings > should tokenize multi-line string markers [0.23ms]
(pass) RclLexer > Comprehensive RCL Structure > should tokenize a complete minimal RCL file [0.22ms]
(pass) RclLexer > Comprehensive RCL Structure > should tokenize space-separated identifiers correctly [0.04ms]
(pass) RclLexer > Error Handling > should handle invalid characters gracefully [0.06ms]
(pass) RclLexer > Error Handling > should handle empty input [0.01ms]
(pass) RclLexer > Error Handling > should handle only whitespace [0.02ms]
(pass) RclLexer > Type Tags > should tokenize type tags with values [0.13ms]
(pass) RclLexer > ISO Duration Literals > should tokenize ISO duration literals [0.06ms]
(pass) RclLexer > Arrow Operators > should tokenize arrow operators [0.07ms]
(pass) RclLexer > Action Keywords > should tokenize action-related keywords [0.03ms]
(pass) RclLexer > Message Keywords > should tokenize message-related keywords [0.02ms]
(pass) RclLexer > Flow Control Keywords > should tokenize flow control keywords [0.08ms]

tests/grammar/comprehensive-parser.test.ts:
35 |         text "Welcome to BMW Premium Support"
36 |         text "Thank you for using BMW Premium Support"`;
37 | 
38 |       const result = parser.parse(input);
39 | 
40 |       expect(result.errors).toHaveLength(0);
                                 ^
error: expect(received).toHaveLength(expected)

Expected length: 0
Received length: 2

      at <anonymous> (/work/rcs/temp/custom-lexer/packages/language/tests/grammar/comprehensive-parser.test.ts:40:29)
(fail) Comprehensive RCL Parser Tests > Agent Section Parsing > parses complex agent with all subsections [1.68ms]
81 | 
82 |       expect(result.errors).toHaveLength(0);
83 |       expect(result.ast).toBeDefined();
84 | 
85 |       const agent = result.ast!.agentDefinition!;
86 |       expect(agent.name).toBe('Validation Agent');
                  ^
TypeError: undefined is not an object (evaluating 'agent.name')
      at <anonymous> (/work/rcs/temp/custom-lexer/packages/language/tests/grammar/comprehensive-parser.test.ts:86:14)
(fail) Comprehensive RCL Parser Tests > Agent Section Parsing > parses agent with validation attributes [0.59ms]
(pass) Comprehensive RCL Parser Tests > Import Statement Parsing > parses various import patterns [0.35ms]
145 | 
146 |       expect(result.errors).toHaveLength(0);
147 |       expect(result.ast!.imports).toHaveLength(2);
148 | 
149 |       // Simple import
150 |       expect(result.ast!.imports[0].importedNames).toContain('Single');
                                                         ^
error: expect(received).toContain(expected)

Expected to contain: "Single"
Received: [ "Single Module" ]

      at <anonymous> (/work/rcs/temp/custom-lexer/packages/language/tests/grammar/comprehensive-parser.test.ts:150:52)
(fail) Comprehensive RCL Parser Tests > Import Statement Parsing > handles import edge cases [0.96ms]
178 | 
179 |       expect(result.errors).toHaveLength(0);
180 |       expect(result.ast).toBeDefined();
181 | 
182 |       const agent = result.ast!.agentDefinition!;
183 |       expect(agent.flowSections).toHaveLength(1);
                   ^
TypeError: undefined is not an object (evaluating 'agent.flowSections')
      at <anonymous> (/work/rcs/temp/custom-lexer/packages/language/tests/grammar/comprehensive-parser.test.ts:183:14)
(fail) Comprehensive RCL Parser Tests > Flow Section Parsing > parses complex flow rules [0.53ms]
199 |       const result = parser.parse(input);
200 | 
201 |       expect(result.errors).toHaveLength(0);
202 | 
203 |       const agent = result.ast!.agentDefinition!;
204 |       expect(agent.flowSections).toHaveLength(1);
                   ^
TypeError: undefined is not an object (evaluating 'agent.flowSections')
      at <anonymous> (/work/rcs/temp/custom-lexer/packages/language/tests/grammar/comprehensive-parser.test.ts:204:14)
(fail) Comprehensive RCL Parser Tests > Flow Section Parsing > parses flow with attributes and complex targets [0.24ms]
238 |         additionalData: null
239 |         timestamp: "2024-01-01T00:00:00Z"`;
240 | 
241 |       const result = parser.parse(input);
242 | 
243 |       expect(result.errors).toHaveLength(0);
                                  ^
error: expect(received).toHaveLength(expected)

Expected length: 0
Received length: 2

      at <anonymous> (/work/rcs/temp/custom-lexer/packages/language/tests/grammar/comprehensive-parser.test.ts:243:29)
(fail) Comprehensive RCL Parser Tests > Message Section Parsing > parses complex message definitions [0.64ms]
320 |             encryption: True
321 |             validateInput: True`;
322 | 
323 |       const result = parser.parse(input);
324 | 
325 |       expect(result.errors).toHaveLength(0);
                                  ^
error: expect(received).toHaveLength(expected)

Expected length: 0
Received length: 53

      at <anonymous> (/work/rcs/temp/custom-lexer/packages/language/tests/grammar/comprehensive-parser.test.ts:325:29)
(fail) Comprehensive RCL Parser Tests > Nested Structure Parsing > parses deeply nested sections [0.60ms]
(pass) Comprehensive RCL Parser Tests > Edge Cases and Error Recovery > handles mixed indentation gracefully [0.17ms]
(pass) Comprehensive RCL Parser Tests > Edge Cases and Error Recovery > recovers from syntax errors [0.23ms]
(pass) Comprehensive RCL Parser Tests > Edge Cases and Error Recovery > handles empty sections [0.13ms]
(pass) Comprehensive RCL Parser Tests > Edge Cases and Error Recovery > handles unicode and special characters [0.39ms]
443 |       expect(sectionNames).toContain('Test Flow');
444 |       expect(sectionNames).toContain('Test Messages');
445 | 
446 |       const flowRules = AstUtils.getFlowRules(ast);
447 |       expect(flowRules).toHaveLength(1);
448 |       expect(flowRules[0].from).toBe(':start');
                                      ^
error: expect(received).toBe(expected)

Expected: ":start"
Received: undefined

      at <anonymous> (/work/rcs/temp/custom-lexer/packages/language/tests/grammar/comprehensive-parser.test.ts:448:33)
(fail) Comprehensive RCL Parser Tests > AST Utility Functions > AST utilities work correctly [0.73ms]
472 |     identifierValue: some_identifier
473 |     spacedIdentifier: Spaced Identifier Value`;
474 | 
475 |       const result = parser.parse(input);
476 | 
477 |       expect(result.errors).toHaveLength(0);
                                  ^
error: expect(received).toHaveLength(expected)

Expected length: 0
Received length: 2

      at <anonymous> (/work/rcs/temp/custom-lexer/packages/language/tests/grammar/comprehensive-parser.test.ts:477:29)
(fail) Comprehensive RCL Parser Tests > Value Type Validation > correctly identifies all value types [0.42ms]

tests/grammar/rcl-custom-parser.test.ts:
(pass) RclParser > Basic Parsing > should parse an empty file
(pass) RclParser > Basic Parsing > should parse a minimal agent section [0.16ms]
(pass) RclParser > Basic Parsing > should parse import statements [0.07ms]
(pass) RclParser > Basic Parsing > should parse multiple sections [0.11ms]
(pass) RclParser > Basic Parsing > should parse boolean and numeric values [0.17ms]
(pass) RclParser > Basic Parsing > should handle space-separated identifiers [0.10ms]
(pass) RclParser > Error Handling > should handle syntax errors gracefully [0.24ms]
(pass) RclParser > Error Handling > should continue parsing after recoverable errors [0.19ms]
(pass) RclParser > Indentation Handling > should handle nested sections with proper indentation [0.25ms]
(pass) RclParser > Enhanced Flow Rules with Arrow Operators > should parse simple flow transitions with arrows [0.21ms]
(pass) RclParser > Enhanced Flow Rules with Arrow Operators > should parse flow transitions with string operands [0.13ms]
(pass) RclParser > Enhanced Flow Rules with Arrow Operators > should parse flow transitions with with clauses [0.17ms]
(pass) RclParser > Enhanced Flow Rules with Arrow Operators > should parse mixed flow rules (legacy named flows and new transitions) [0.03ms]
(pass) RclParser > Enhanced Flow Rules with Arrow Operators > should handle complex real-world flow example [0.26ms]

tests/grammar/embedded-code.test.ts:
(pass) RCL Embedded Code Storage > Single-line Embedded Expressions > should parse $js> single-line expressions [0.31ms]
(pass) RCL Embedded Code Storage > Single-line Embedded Expressions > should parse $ts> single-line expressions [0.06ms]
(pass) RCL Embedded Code Storage > Single-line Embedded Expressions > should parse $> style expressions as JavaScript (default language) [0.06ms]
(pass) RCL Embedded Code Storage > Multi-line Embedded Code Blocks > should parse $js> multi-line code blocks [0.29ms]
(pass) RCL Embedded Code Storage > Multi-line Embedded Code Blocks > should handle multi-line blocks without explicit language (defaults to js) [0.05ms]
(pass) RCL Embedded Code Storage > Embedded Code in Flow Rules > should parse embedded expressions in flow rule parameters [0.17ms]
(pass) RCL Embedded Code Storage > Mixed Embedded Code and Regular Values > should handle sections with both embedded code and regular values [0.20ms]
(pass) RCL Embedded Code Storage > Error Handling > should handle malformed embedded expressions gracefully [0.14ms]

tests/grammar/integration.test.ts:
(pass) RCL Lexer + Parser Integration > Complete Pipeline > should parse minimal.rcl example successfully [1.20ms]
112 | 
113 |       // Check imports
114 |       expect(ast.imports).toHaveLength(2);
115 | 
116 |       const utilsImport = ast.imports[0];
117 |       expect(utilsImport.importedNames).toContain('utils');
                                              ^
error: expect(received).toContain(expected)

Expected to contain: "utils"
Received: [ "Shared", "Common Utils" ]

      at <anonymous> (/work/rcs/temp/custom-lexer/packages/language/tests/grammar/integration.test.ts:117:41)
(fail) RCL Lexer + Parser Integration > Complete Pipeline > should handle imports and complex structure [0.51ms]
(pass) RCL Lexer + Parser Integration > Complete Pipeline > should handle space-separated identifiers correctly [0.45ms]
(pass) RCL Lexer + Parser Integration > Complete Pipeline > should handle mixed value types [0.55ms]
(pass) RCL Lexer + Parser Integration > Error Recovery > should handle partial parsing with errors [0.18ms]
(pass) RCL Lexer + Parser Integration > Performance > should handle reasonably large files efficiently [2.65ms]
Skipping example.rcl test - file not found
(pass) RCL Lexer + Parser Integration > Real Example Files > should parse example.rcl if it exists [1.45ms]
Skipping minimal.rcl test - file not found
(pass) RCL Lexer + Parser Integration > Real Example Files > should parse minimal.rcl if it exists [0.10ms]

tests/lexer/critical-fixes.test.ts:
(pass) Critical Lexer Fixes > Multi-line Expression Syntax Fix > should properly tokenize multi-line expression start without braces [1.53ms]
(pass) Critical Lexer Fixes > Multi-line Expression Syntax Fix > should handle TypeScript multi-line expressions [0.38ms]
(pass) Critical Lexer Fixes > Multi-line Expression Syntax Fix > should handle language-agnostic multi-line expressions [0.19ms]
(pass) Critical Lexer Fixes > Embedded Code Pattern Fix > should correctly tokenize single-line embedded expressions [0.08ms]
(pass) Critical Lexer Fixes > Embedded Code Pattern Fix > should handle TypeScript single-line expressions [0.07ms]
(pass) Critical Lexer Fixes > Embedded Code Pattern Fix > should handle language-agnostic single-line expressions [0.06ms]
(pass) Critical Lexer Fixes > Identifier Pattern Fix > should handle space-separated identifiers without word boundaries [0.04ms]
(pass) Critical Lexer Fixes > Identifier Pattern Fix > should handle identifiers with numbers and hyphens [0.03ms]
(pass) Critical Lexer Fixes > Identifier Pattern Fix > should require uppercase start per specification [0.03ms]
(pass) Critical Lexer Fixes > Type Tag Token Support > should tokenize type tag patterns [0.74ms]
(pass) Critical Lexer Fixes > Type Tag Token Support > should handle type tags with modifiers [0.22ms]
(pass) Critical Lexer Fixes > Type Tag Token Support > should support all type tag names from specification [0.88ms]
(pass) Critical Lexer Fixes > Multi-line String Chomping Markers > should tokenize clean marker [0.10ms]
(pass) Critical Lexer Fixes > Multi-line String Chomping Markers > should tokenize trim marker [0.05ms]
(pass) Critical Lexer Fixes > Multi-line String Chomping Markers > should tokenize preserve marker [0.04ms]
(pass) Critical Lexer Fixes > Multi-line String Chomping Markers > should tokenize preserve all marker [0.07ms]
(pass) Critical Lexer Fixes > Import Path Tokenization > should handle slash-separated import paths [0.05ms]
232 |     const input = `\$js>> incomplete expression`;
233 | 
234 |     const result = lexer.tokenize(input);
235 | 
236 |     // Should not crash and should report helpful errors
237 |     expect(result.errors.length).toBeGreaterThan(0);
                                       ^
error: expect(received).toBeGreaterThan(expected)

Expected: > 0
Received: 0

      at <anonymous> (/work/rcs/temp/custom-lexer/packages/language/tests/lexer/critical-fixes.test.ts:237:34)
(fail) Error Handling Improvements > should provide clear error messages for malformed expressions [0.02ms]
(pass) Error Handling Improvements > should recover from indentation errors gracefully [0.24ms]

tests/integration/discrepancy-validation.test.ts:
26 |   return result;`;
27 | 
28 |       const result = lexer.tokenize(input);
29 | 
30 |       // Should tokenize correctly without expecting braces
31 |       expect(result.errors).toHaveLength(0);
                                 ^
error: expect(received).toHaveLength(expected)

Expected length: 0
Received length: 3

      at <anonymous> (/work/rcs/temp/custom-lexer/packages/language/tests/integration/discrepancy-validation.test.ts:31:29)
(fail) Discrepancy Validation > Critical Issue #1: Multi-line Expression Syntax > FIXED: Multi-line expressions now use indentation, not braces [0.39ms]
(pass) Discrepancy Validation > Critical Issue #1: Multi-line Expression Syntax > FIXED: Language tag patterns match specification exactly [0.16ms]
67 |     :start -> Welcome`;
68 | 
69 |       const result = parser.parse(input);
70 | 
71 |       expect(result.ast).toBeDefined();
72 |       expect(result.errors).toHaveLength(0);
                                 ^
error: expect(received).toHaveLength(expected)

Expected length: 0
Received length: 1

      at <anonymous> (/work/rcs/temp/custom-lexer/packages/language/tests/integration/discrepancy-validation.test.ts:72:29)
(fail) Discrepancy Validation > Critical Issue #2: Missing Message Shortcuts > FIXED: Text shortcuts are fully implemented [0.64ms]
89 |     :start -> Product`;
90 | 
91 |       const result = parser.parse(input);
92 | 
93 |       expect(result.ast).toBeDefined();
94 |       expect(result.errors).toHaveLength(0);
                                 ^
error: expect(received).toHaveLength(expected)

Expected length: 0
Received length: 1

      at <anonymous> (/work/rcs/temp/custom-lexer/packages/language/tests/integration/discrepancy-validation.test.ts:94:29)
(fail) Discrepancy Validation > Critical Issue #2: Missing Message Shortcuts > FIXED: RichCard shortcuts with all modifiers work [0.80ms]
109 |     :start -> Products`;
110 | 
111 |       const result = parser.parse(input);
112 | 
113 |       expect(result.ast).toBeDefined();
114 |       expect(result.errors).toHaveLength(0);
                                  ^
error: expect(received).toHaveLength(expected)

Expected length: 0
Received length: 1

      at <anonymous> (/work/rcs/temp/custom-lexer/packages/language/tests/integration/discrepancy-validation.test.ts:114:29)
(fail) Discrepancy Validation > Critical Issue #2: Missing Message Shortcuts > FIXED: Carousel shortcuts are implemented [0.35ms]
126 |     :start -> Document`;
127 | 
128 |       const result = parser.parse(input);
129 | 
130 |       expect(result.ast).toBeDefined();
131 |       expect(result.errors).toHaveLength(0);
                                  ^
error: expect(received).toHaveLength(expected)

Expected length: 0
Received length: 1

      at <anonymous> (/work/rcs/temp/custom-lexer/packages/language/tests/integration/discrepancy-validation.test.ts:131:29)
(fail) Discrepancy Validation > Critical Issue #2: Missing Message Shortcuts > FIXED: File shortcuts (rbmFile, file) are implemented [0.72ms]
150 |     :start -> Actions`;
151 | 
152 |       const result = parser.parse(input);
153 | 
154 |       expect(result.ast).toBeDefined();
155 |       expect(result.errors).toHaveLength(0);
                                  ^
error: expect(received).toHaveLength(expected)

Expected length: 0
Received length: 2

      at <anonymous> (/work/rcs/temp/custom-lexer/packages/language/tests/integration/discrepancy-validation.test.ts:155:29)
(fail) Discrepancy Validation > Critical Issue #2: Missing Message Shortcuts > FIXED: Action shortcuts in suggestions work [1.03ms]
169 |     :start -> Hello`;
170 | 
171 |       const result = parser.parse(input);
172 | 
173 |       // Should follow specification: RclFile ::= (ImportStatement)* AgentDefinition
174 |       expect(result.ast?.agentDefinition).toBeDefined();
                                                ^
error: expect(received).toBeDefined()

Received: undefined

      at <anonymous> (/work/rcs/temp/custom-lexer/packages/language/tests/integration/discrepancy-validation.test.ts:174:43)
(fail) Discrepancy Validation > Critical Issue #3: Parser Structure Mismatch > FIXED: Parser enforces required AgentDefinition hierarchy [0.23ms]
184 |   messages Messages:
185 |     text "Hi"`;
186 | 
187 |       const result = parser.parse(input);
188 | 
189 |       expect(result.errors.some(e => e.message.includes('displayName is required'))).toBe(true);
                                                                                           ^
error: expect(received).toBe(expected)

Expected: true
Received: false

      at <anonymous> (/work/rcs/temp/custom-lexer/packages/language/tests/integration/discrepancy-validation.test.ts:189:86)
(fail) Discrepancy Validation > Critical Issue #3: Parser Structure Mismatch > FIXED: Required displayName is enforced [0.17ms]
195 |   messages Messages:
196 |     text "Hi"`;
197 | 
198 |       const result = parser.parse(input);
199 | 
200 |       expect(result.errors.some(e => e.message.includes('at least one flow'))).toBe(true);
                                                                                     ^
error: expect(received).toBe(expected)

Expected: true
Received: false

      at <anonymous> (/work/rcs/temp/custom-lexer/packages/language/tests/integration/discrepancy-validation.test.ts:200:80)
(fail) Discrepancy Validation > Critical Issue #3: Parser Structure Mismatch > FIXED: At least one flow section is enforced [0.15ms]
206 |   flow Flow:
207 |     :start -> Hello`;
208 | 
209 |       const result = parser.parse(input);
210 | 
211 |       expect(result.errors.some(e => e.message.includes('messages section'))).toBe(true);
                                                                                    ^
error: expect(received).toBe(expected)

Expected: true
Received: false

      at <anonymous> (/work/rcs/temp/custom-lexer/packages/language/tests/integration/discrepancy-validation.test.ts:211:79)
(fail) Discrepancy Validation > Critical Issue #3: Parser Structure Mismatch > FIXED: Exactly one messages section is enforced [0.14ms]
228 |     :start -> Hello`;
229 | 
230 |       const result = parser.parse(input);
231 | 
232 |       expect(result.ast).toBeDefined();
233 |       expect(result.errors).toHaveLength(0);
                                  ^
error: expect(received).toHaveLength(expected)

Expected length: 0
Received length: 2

      at <anonymous> (/work/rcs/temp/custom-lexer/packages/language/tests/integration/discrepancy-validation.test.ts:233:29)
(fail) Discrepancy Validation > Critical Issue #4: Type Tag Implementation > FIXED: Type tags are properly parsed [0.66ms]
247 |     :start -> Hello`;
248 | 
249 |       const result = parser.parse(input);
250 | 
251 |       expect(result.ast).toBeDefined();
252 |       expect(result.errors).toHaveLength(0);
                                  ^
error: expect(received).toHaveLength(expected)

Expected length: 0
Received length: 1

      at <anonymous> (/work/rcs/temp/custom-lexer/packages/language/tests/integration/discrepancy-validation.test.ts:252:29)
(fail) Discrepancy Validation > Critical Issue #4: Type Tag Implementation > FIXED: Type tags with modifiers work [0.89ms]
267 |     :start -> A -> B -> C`;
268 | 
269 |       const result = parser.parse(input);
270 | 
271 |       expect(result.ast).toBeDefined();
272 |       expect(result.errors).toHaveLength(0);
                                  ^
error: expect(received).toHaveLength(expected)

Expected length: 0
Received length: 1

      at <anonymous> (/work/rcs/temp/custom-lexer/packages/language/tests/integration/discrepancy-validation.test.ts:272:29)
(fail) Discrepancy Validation > Critical Issue #5: Flow System Compliance > FIXED: Multi-arrow transitions work (A -> B -> C) [0.36ms]
286 |       priority: "high"`;
287 | 
288 |       const result = parser.parse(input);
289 | 
290 |       expect(result.ast).toBeDefined();
291 |       expect(result.errors).toHaveLength(0);
                                  ^
error: expect(received).toHaveLength(expected)

Expected length: 0
Received length: 1

      at <anonymous> (/work/rcs/temp/custom-lexer/packages/language/tests/integration/discrepancy-validation.test.ts:291:29)
(fail) Discrepancy Validation > Critical Issue #5: Flow System Compliance > FIXED: With clauses for parameter passing work [0.40ms]
306 |       :start -> Regular`;
307 | 
308 |       const result = parser.parse(input);
309 | 
310 |       expect(result.ast).toBeDefined();
311 |       expect(result.errors).toHaveLength(0);
                                  ^
error: expect(received).toHaveLength(expected)

Expected length: 0
Received length: 1

      at <anonymous> (/work/rcs/temp/custom-lexer/packages/language/tests/integration/discrepancy-validation.test.ts:311:29)
(fail) Discrepancy Validation > Critical Issue #5: Flow System Compliance > FIXED: When clauses for conditional flows work [0.41ms]
(pass) Discrepancy Validation > High Priority Issue #6: Identifier Pattern > FIXED: Space-separated identifiers work without word boundaries [0.11ms]
(pass) Discrepancy Validation > High Priority Issue #7: Multi-line String Handling > FIXED: All chomping markers are supported [0.39ms]
(pass) Discrepancy Validation > Medium Priority Issue #8: Import Resolution > FIXED: Import paths follow specification (slash-separated) [0.31ms]
(pass) Discrepancy Validation > Medium Priority Issue #8: Import Resolution > FIXED: Import aliases with space-separated identifiers work [0.19ms]
586 |       const result = parser.parse(input);
587 | 
588 |       // This comprehensive test validates that ALL the identified discrepancies have been fixed
589 |       expect(result.ast).toBeDefined();
590 |       expect(result.ast?.imports).toHaveLength(2);
591 |       expect(result.ast?.agentDefinition?.name).toBe('Advanced E-commerce Support');
                                                      ^
error: expect(received).toBe(expected)

Expected: "Advanced E-commerce Support"
Received: undefined

      at <anonymous> (/work/rcs/temp/custom-lexer/packages/language/tests/integration/discrepancy-validation.test.ts:591:49)
(fail) Discrepancy Validation > Integration Test: Complete Specification Compliance > COMPREHENSIVE: All fixes work together in complex example [12.44ms]

tests/integration/formal-spec-examples.test.ts:
(pass) Formal Specification Examples > Section 2: Lexical Examples > Multi-line Expression Examples (Lines 190-191)
(pass) Formal Specification Examples > Section 2: Lexical Examples > Embedded Code Examples (Line 196) [0.43ms]
(pass) Formal Specification Examples > Section 2: Lexical Examples > Multi-line String Examples (Lines 195-212) [0.45ms]
102 | 
103 |       const result = parser.parse(input);
104 | 
105 |       expect(result.ast).toBeDefined();
106 |       expect(result.ast?.imports).toHaveLength(1);
107 |       expect(result.ast?.agentDefinition?.name).toBe('Customer Support');
                                                      ^
error: expect(received).toBe(expected)

Expected: "Customer Support"
Received: undefined

      at <anonymous> (/work/rcs/temp/custom-lexer/packages/language/tests/integration/formal-spec-examples.test.ts:107:49)
(fail) Formal Specification Examples > Section 3: Syntactic Examples > RclFile Structure Example (Lines 228-246) [0.39ms]
128 |   flow Flow:
129 |     :start -> Hello`;
130 | 
131 |         const result = parser.parse(fullInput);
132 |         expect(result.ast?.imports).toHaveLength(1);
133 |         expect(result.errors).toHaveLength(0);
                                    ^
error: expect(received).toHaveLength(expected)

Expected length: 0
Received length: 1

      at <anonymous> (/work/rcs/temp/custom-lexer/packages/language/tests/integration/formal-spec-examples.test.ts:133:31)
      at forEach (1:11)
      at <anonymous> (/work/rcs/temp/custom-lexer/packages/language/tests/integration/formal-spec-examples.test.ts:121:16)
(fail) Formal Specification Examples > Section 3: Syntactic Examples > Import Statement Examples (Lines 234-235) [0.32ms]
151 |       userId: \$js> context.user.id`;
152 | 
153 |       const result = parser.parse(input);
154 | 
155 |       expect(result.ast).toBeDefined();
156 |       expect(result.errors).toHaveLength(0);
                                  ^
error: expect(received).toHaveLength(expected)

Expected length: 0
Received length: 1

      at <anonymous> (/work/rcs/temp/custom-lexer/packages/language/tests/integration/formal-spec-examples.test.ts:156:29)
(fail) Formal Specification Examples > Section 3: Syntactic Examples > Flow Rule Examples (Lines 277-295) [0.41ms]
(pass) Formal Specification Examples > Section 4: Identifier Examples (Line 575) > Space-separated Identifier Pattern [0.09ms]
191 |   flow Flow:
192 |     :start -> Hello`;
193 | 
194 |       const result = parser.parse(input);
195 |       expect(result.ast).toBeDefined();
196 |       expect(result.errors).toHaveLength(0);
                                  ^
error: expect(received).toHaveLength(expected)

Expected length: 0
Received length: 1

      at <anonymous> (/work/rcs/temp/custom-lexer/packages/language/tests/integration/formal-spec-examples.test.ts:196:29)
(fail) Formal Specification Examples > Section 5: Data Type Examples > Basic Value Types [0.28ms]
220 |   flow Flow:
221 |     :start -> Hello`;
222 | 
223 |       const result = parser.parse(input);
224 |       expect(result.ast).toBeDefined();
225 |       expect(result.errors).toHaveLength(0);
                                  ^
error: expect(received).toHaveLength(expected)

Expected length: 0
Received length: 1

      at <anonymous> (/work/rcs/temp/custom-lexer/packages/language/tests/integration/formal-spec-examples.test.ts:225:29)
(fail) Formal Specification Examples > Section 5: Data Type Examples > Collection Types [0.76ms]
244 |   flow Flow:
245 |     :start -> Hello`;
246 | 
247 |       const result = parser.parse(input);
248 |       expect(result.ast).toBeDefined();
249 |       expect(result.errors).toHaveLength(0);
                                  ^
error: expect(received).toHaveLength(expected)

Expected length: 0
Received length: 2

      at <anonymous> (/work/rcs/temp/custom-lexer/packages/language/tests/integration/formal-spec-examples.test.ts:249:29)
(fail) Formal Specification Examples > Section 5: Data Type Examples > Type Tags [1.07ms]
276 |   flow Flow:
277 |     :start -> Hello`;
278 | 
279 |       const result = parser.parse(input);
280 |       expect(result.ast).toBeDefined();
281 |       expect(result.errors).toHaveLength(0);
                                  ^
error: expect(received).toHaveLength(expected)

Expected length: 0
Received length: 1

      at <anonymous> (/work/rcs/temp/custom-lexer/packages/language/tests/integration/formal-spec-examples.test.ts:281:29)
(fail) Formal Specification Examples > Section 6: Collection Examples > List Syntax Variations [0.37ms]
302 |   flow Flow:
303 |     :start -> Hello`;
304 | 
305 |       const result = parser.parse(input);
306 |       expect(result.ast).toBeDefined();
307 |       expect(result.errors).toHaveLength(0);
                                  ^
error: expect(received).toHaveLength(expected)

Expected length: 0
Received length: 1

      at <anonymous> (/work/rcs/temp/custom-lexer/packages/language/tests/integration/formal-spec-examples.test.ts:307:29)
(fail) Formal Specification Examples > Section 6: Collection Examples > Dictionary Syntax Variations [0.37ms]
327 |   flow Flow:
328 |     :start -> Hello`;
329 | 
330 |       const result = parser.parse(input);
331 |       expect(result.ast).toBeDefined();
332 |       expect(result.errors).toHaveLength(0);
                                  ^
error: expect(received).toHaveLength(expected)

Expected length: 0
Received length: 1

      at <anonymous> (/work/rcs/temp/custom-lexer/packages/language/tests/integration/formal-spec-examples.test.ts:332:29)
(fail) Formal Specification Examples > Section 6: Collection Examples > Mapped Type Examples [0.90ms]
435 | 
436 |       const result = parser.parse(input);
437 | 
438 |       expect(result.ast).toBeDefined();
439 |       expect(result.ast?.imports).toHaveLength(1);
440 |       expect(result.ast?.agentDefinition?.name).toBe('Comprehensive Support Agent');
                                                      ^
error: expect(received).toBe(expected)

Expected: "Comprehensive Support Agent"
Received: undefined

      at <anonymous> (/work/rcs/temp/custom-lexer/packages/language/tests/integration/formal-spec-examples.test.ts:440:49)
(fail) Formal Specification Examples > Section 7: Section Examples > Complete Agent with All Sections [1.75ms]
508 |     :start -> Simple`;
509 | 
510 |       const result = parser.parse(input);
511 | 
512 |       expect(result.ast).toBeDefined();
513 |       expect(result.errors).toHaveLength(0);
                                  ^
error: expect(received).toHaveLength(expected)

Expected length: 0
Received length: 2

      at <anonymous> (/work/rcs/temp/custom-lexer/packages/language/tests/integration/formal-spec-examples.test.ts:513:29)
(fail) Formal Specification Examples > Section 8: Message Shortcut Examples (Lines 497-563) > All Message Shortcuts [2.36ms]
657 | 
658 |       const result = parser.parse(input);
659 | 
660 |       expect(result.ast).toBeDefined();
661 |       expect(result.ast?.imports).toHaveLength(2);
662 |       expect(result.ast?.agentDefinition?.name).toBe('E-commerce Support');
                                                      ^
error: expect(received).toBe(expected)

Expected: "E-commerce Support"
Received: undefined

      at <anonymous> (/work/rcs/temp/custom-lexer/packages/language/tests/integration/formal-spec-examples.test.ts:662:49)
(fail) Formal Specification Examples > Complex Real-World Examples > E-commerce Support Agent [5.47ms]

tests/textmate/scope.test.ts:
Testing: Sequential token map for example.rcl - when all text segments are concatenated, they should reproduce the original file exactly
Coverage: Covers imports, agent declaration, config, defaults, flow start, and beginning of Messages section including message and agentMessage keywords
Checking if mapped tokens appear in sequence at file start...
Mapped segment length: 420, File length: 6926
❌ Missing expected token: "import" with scope "keyword.control.import.rcl"
   No tokens found with text: "import"
❌ Missing expected token: " " with scope "meta.import.rcl"
   No tokens found with text: " "
❌ Missing expected token: "My Brand" with scope "entity.name.namespace.rcl"
   Found 3 tokens with that text but different scopes:
     - source.rcl, entity.name.section.rcl
     - source.rcl, entity.name.section.rcl
     - source.rcl, undefined, entity.name.section.rcl
❌ Missing expected token: " " with scope "meta.import.rcl"
   No tokens found with text: " "
❌ Missing expected token: "/" with scope "punctuation.separator.namespace.rcl"
   No tokens found with text: "/"
❌ Missing expected token: " " with scope "meta.import.rcl"
   No tokens found with text: " "
❌ Missing expected token: "Samples.one" with scope "entity.name.module.rcl"
   No tokens found with text: "Samples.one"
❌ Missing expected token: " " with scope "meta.import.rcl"
   No tokens found with text: " "
❌ Missing expected token: "as" with scope "keyword.control.import.as.rcl"
   Found 1 tokens with that text but different scopes:
     - source.rcl, undefined, entity.other.attribute-name.rcl
❌ Missing expected token: " " with scope "meta.import.rcl"
   No tokens found with text: " "
❌ Missing expected token: "Sample One" with scope "entity.name.alias.rcl"
   Found 1 tokens with that text but different scopes:
     - source.rcl, entity.name.section.rcl
❌ Missing expected token: "
" with scope "text.rcl"
   No tokens found with text: "
"
❌ Missing expected token: "import" with scope "keyword.control.import.rcl"
   No tokens found with text: "import"
❌ Missing expected token: " " with scope "meta.import.rcl"
   No tokens found with text: " "
❌ Missing expected token: "My Brand" with scope "entity.name.namespace.rcl"
   Found 3 tokens with that text but different scopes:
     - source.rcl, entity.name.section.rcl
     - source.rcl, entity.name.section.rcl
     - source.rcl, undefined, entity.name.section.rcl
❌ Missing expected token: " " with scope "meta.import.rcl"
   No tokens found with text: " "
❌ Missing expected token: "/" with scope "punctuation.separator.namespace.rcl"
   No tokens found with text: "/"
❌ Missing expected token: " " with scope "meta.import.rcl"
   No tokens found with text: " "
❌ Missing expected token: "Samples.two" with scope "entity.name.module.rcl"
   No tokens found with text: "Samples.two"
❌ Missing expected token: " " with scope "meta.import.rcl"
   No tokens found with text: " "
❌ Missing expected token: "as" with scope "keyword.control.import.as.rcl"
   Found 1 tokens with that text but different scopes:
     - source.rcl, undefined, entity.other.attribute-name.rcl
❌ Missing expected token: " " with scope "meta.import.rcl"
   No tokens found with text: " "
❌ Missing expected token: "Sample Two" with scope "entity.name.alias.rcl"
   Found 1 tokens with that text but different scopes:
     - source.rcl, entity.name.section.rcl
❌ Missing expected token: "

" with scope "text.rcl"
   No tokens found with text: "

"
❌ Missing expected token: "agent" with scope "keyword.control.section.agent.rcl"
   Found 1 tokens with that text but different scopes:
     - source.rcl, undefined, undefined
❌ Missing expected token: " " with scope "meta.section.agent.rcl"
   No tokens found with text: " "
❌ Missing expected token: "My Brand" with scope "entity.name.section.agent.rcl"
   Found 3 tokens with that text but different scopes:
     - source.rcl, entity.name.section.rcl
     - source.rcl, entity.name.section.rcl
     - source.rcl, undefined, entity.name.section.rcl
❌ Missing expected token: "
" with scope "meta.section.agent.rcl"
   No tokens found with text: "
"
❌ Missing expected token: "  " with scope "punctuation.whitespace.leading.rcl"
   No tokens found with text: "  "
❌ Missing expected token: "brandName" with scope "variable.other.property.rcl"
   No tokens found with text: "brandName"
❌ Missing expected token: ":" with scope "punctuation.separator.key-value.rcl"
   Found 1 tokens with that text but different scopes:
     - source.rcl, undefined
❌ Missing expected token: " " with scope "meta.value.single-line.rcl"
   No tokens found with text: " "
❌ Missing expected token: """ with scope "punctuation.definition.string.begin.rcl"
   No tokens found with text: """
❌ Missing expected token: "Sample Brand" with scope "string.quoted.double.rcl"
   No tokens found with text: "Sample Brand"
❌ Missing expected token: """ with scope "punctuation.definition.string.end.rcl"
   No tokens found with text: """
❌ Missing expected token: "
" with scope "meta.section.agent.rcl"
   No tokens found with text: "
"
❌ Missing expected token: "  " with scope "punctuation.whitespace.leading.rcl"
   No tokens found with text: "  "
❌ Missing expected token: "displayName" with scope "variable.other.property.rcl"
   Found 1 tokens with that text but different scopes:
     - source.rcl, undefined, entity.other.attribute-name.rcl
❌ Missing expected token: ":" with scope "punctuation.separator.key-value.rcl"
   Found 1 tokens with that text but different scopes:
     - source.rcl, undefined
❌ Missing expected token: " " with scope "meta.value.single-line.rcl"
   No tokens found with text: " "
❌ Missing expected token: """ with scope "punctuation.definition.string.begin.rcl"
   No tokens found with text: """
❌ Missing expected token: "Sample Agent" with scope "string.quoted.double.rcl"
   No tokens found with text: "Sample Agent"
❌ Missing expected token: """ with scope "punctuation.definition.string.end.rcl"
   No tokens found with text: """
❌ Missing expected token: "

" with scope "meta.section.agent.rcl"
   No tokens found with text: "

"
❌ Missing expected token: "  " with scope "punctuation.whitespace.leading.rcl"
   No tokens found with text: "  "
❌ Missing expected token: "Config" with scope "keyword.control.section.config.rcl"
   No tokens found with text: "Config"
❌ Missing expected token: "
" with scope "meta.subsection.config.rcl"
   No tokens found with text: "
"
❌ Missing expected token: "    " with scope "punctuation.whitespace.leading.rcl"
   No tokens found with text: "    "
❌ Missing expected token: "message" with scope "keyword.control.section.message.rcl"
   No tokens found with text: "message"
❌ Missing expected token: " " with scope "meta.message.declaration.rcl"
   No tokens found with text: " "
❌ Missing expected token: "Welcome" with scope "entity.name.section.message.rcl"
   No tokens found with text: "Welcome"
❌ Missing expected token: "
" with scope "meta.subsection.messages.rcl"
   No tokens found with text: "
"
❌ Missing expected token: "      " with scope "punctuation.whitespace.leading.rcl"
   No tokens found with text: "      "
❌ Missing expected token: "text" with scope "variable.other.property.rcl"
   Found 20 tokens with that text but different scopes:
     - source.rcl, undefined, entity.other.attribute-name.rcl
     - source.rcl, undefined, entity.other.attribute-name.rcl
     - source.rcl, undefined, entity.other.attribute-name.rcl
     - source.rcl, undefined, entity.other.attribute-name.rcl
     - source.rcl, undefined, entity.other.attribute-name.rcl
     - source.rcl, undefined, entity.other.attribute-name.rcl
     - source.rcl, undefined, entity.other.attribute-name.rcl
     - source.rcl, undefined, entity.other.attribute-name.rcl
     - source.rcl, undefined, entity.other.attribute-name.rcl
     - source.rcl, undefined, entity.other.attribute-name.rcl
     - source.rcl, undefined, entity.other.attribute-name.rcl
     - source.rcl, undefined, entity.other.attribute-name.rcl
     - source.rcl, undefined, entity.other.attribute-name.rcl
     - source.rcl, undefined, entity.other.attribute-name.rcl
     - source.rcl, undefined, entity.other.attribute-name.rcl
     - source.rcl, undefined, entity.other.attribute-name.rcl
     - source.rcl, undefined, entity.other.attribute-name.rcl
     - source.rcl, undefined, entity.other.attribute-name.rcl
     - source.rcl, undefined, entity.other.attribute-name.rcl
     - source.rcl, undefined, entity.other.attribute-name.rcl
❌ Missing expected token: ":" with scope "punctuation.separator.key-value.rcl"
   Found 1 tokens with that text but different scopes:
     - source.rcl, undefined
❌ Missing expected token: " " with scope "meta.value.single-line.rcl"
   No tokens found with text: " "
❌ Missing expected token: """ with scope "punctuation.definition.string.begin.rcl"
   No tokens found with text: """
❌ Missing expected token: "Hello! This is a transactional message with various suggestions. How can I help you today?" with scope "string.quoted.double.rcl"
   No tokens found with text: "Hello! This is a transactional message with various suggestions. How can I help you today?"
❌ Missing expected token: """ with scope "punctuation.definition.string.end.rcl"
   No tokens found with text: """
❌ Missing expected token: "
" with scope "meta.subsection.messages.rcl"
   No tokens found with text: "
"
❌ Missing expected token: "      " with scope "punctuation.whitespace.leading.rcl"
   No tokens found with text: "      "
❌ Missing expected token: "suggestions" with scope "variable.other.property.rcl"
   No tokens found with text: "suggestions"
❌ Missing expected token: "
" with scope "meta.subsection.messages.rcl"
   No tokens found with text: "
"
❌ Missing expected token: "        " with scope "punctuation.whitespace.leading.rcl"
   No tokens found with text: "        "
❌ Missing expected token: "reply" with scope "keyword.control.action.property.rcl"
   Found 7 tokens with that text but different scopes:
     - source.rcl, undefined, entity.other.attribute-name.rcl
     - source.rcl, undefined, entity.other.attribute-name.rcl
     - source.rcl, undefined, entity.other.attribute-name.rcl
     - source.rcl, undefined, entity.other.attribute-name.rcl
     - source.rcl, undefined, entity.other.attribute-name.rcl
     - source.rcl, undefined, entity.other.attribute-name.rcl
     - source.rcl, undefined, entity.other.attribute-name.rcl
❌ Missing expected token: ":" with scope "punctuation.separator.key-value.rcl"
   Found 1 tokens with that text but different scopes:
     - source.rcl, undefined
❌ Missing expected token: " " with scope "meta.value.single-line.rcl"
   No tokens found with text: " "
❌ Missing expected token: """ with scope "punctuation.definition.string.begin.rcl"
   No tokens found with text: """
❌ Missing expected token: "Tell me more" with scope "string.quoted.double.rcl"
   No tokens found with text: "Tell me more"
❌ Missing expected token: """ with scope "punctuation.definition.string.end.rcl"
   No tokens found with text: """
❌ Missing expected token: "
" with scope "meta.subsection.messages.rcl"
   No tokens found with text: "
"
❌ Missing expected token: "        " with scope "punctuation.whitespace.leading.rcl"
   No tokens found with text: "        "
❌ Missing expected token: "dialAction" with scope "keyword.control.action.property.rcl"
   Found 3 tokens with that text but different scopes:
     - source.rcl, undefined, entity.other.attribute-name.rcl
     - source.rcl, undefined, entity.other.attribute-name.rcl
     - source.rcl, undefined, entity.other.attribute-name.rcl
❌ Missing expected token: ":" with scope "punctuation.separator.key-value.rcl"
   Found 1 tokens with that text but different scopes:
     - source.rcl, undefined
❌ Missing expected token: " " with scope "meta.value.single-line.rcl"
   No tokens found with text: " "
❌ Missing expected token: """ with scope "punctuation.definition.string.begin.rcl"
   No tokens found with text: """
❌ Missing expected token: "Call Us" with scope "string.quoted.double.rcl"
   No tokens found with text: "Call Us"
❌ Missing expected token: """ with scope "punctuation.definition.string.end.rcl"
   No tokens found with text: """
❌ Missing expected token: ", " with scope "meta.value.single-line.rcl"
   Found 19 tokens with that text but different scopes:
     - source.rcl, undefined
     - source.rcl, undefined
     - source.rcl, undefined
     - source.rcl, undefined
     - source.rcl, undefined
     - source.rcl, undefined
     - source.rcl, undefined
     - source.rcl, undefined
     - source.rcl, undefined
     - source.rcl, undefined
     - source.rcl, undefined
     - source.rcl, undefined
     - source.rcl, undefined
     - source.rcl, undefined
     - source.rcl, undefined
     - source.rcl, undefined
     - source.rcl, undefined
     - source.rcl, undefined
     - source.rcl, undefined
❌ Missing expected token: """ with scope "punctuation.definition.string.begin.rcl"
   No tokens found with text: """
❌ Missing expected token: "+1234567890" with scope "string.quoted.double.rcl"
   No tokens found with text: "+1234567890"
❌ Missing expected token: """ with scope "punctuation.definition.string.end.rcl"
   No tokens found with text: """
❌ Missing expected token: "
" with scope "meta.subsection.messages.rcl"
   No tokens found with text: "
"
❌ Missing expected token: "    " with scope "punctuation.whitespace.leading.rcl"
   No tokens found with text: "    "
❌ Missing expected token: "agentMessage" with scope "keyword.control.section.agentmessage.rcl"
   No tokens found with text: "agentMessage"
❌ Missing expected token: " " with scope "meta.agentmessage.declaration.rcl"
   No tokens found with text: " "
❌ Missing expected token: "Welcome Full" with scope "entity.name.section.agentmessage.rcl"
   No tokens found with text: "Welcome Full"
❌ Missing expected token: "
" with scope "meta.subsection.messages.rcl"
   No tokens found with text: "
"
✅ Scope validation: 0/88 tokens correctly scoped (0%)
242 | 
243 |       console.log(`✅ Scope validation: ${passedTokens}/${totalTokens} tokens correctly scoped (${Math.round(passedTokens/totalTokens*100)}%)`);
244 | 
245 |       // We expect high success rate for our mapped tokens since they represent the key elements we've fixed
246 |       const successRate = passedTokens / totalTokens;
247 |       expect(successRate).toBeGreaterThanOrEqual(0.85); // 85% threshold for partial mapping
                                ^
error: expect(received).toBeGreaterThanOrEqual(expected)

Expected: >= 0.85
Received: 0

      at <anonymous> (/work/rcs/temp/custom-lexer/packages/language/tests/textmate/scope.test.ts:247:27)
(fail) RCL TextMate Grammar Scope Tests > Example File Scope Validation > example.rcl file matches expected scopes for mapped tokens [15.59ms]

Testing: message Welcome
  Token: "message " -> source.rcl
  Token: "Welcome" -> source.rcl, entity.name.section.rcl
  Token "message" not found!
  Expected "Welcome" to have "entity.name.section.message.rcl": FAIL
    Actual scopes: source.rcl, entity.name.section.rcl

Testing: agentMessage Welcome Full
  Token: "agent" -> source.rcl
  Token: "Message Welcome Full" -> source.rcl, entity.name.section.rcl
  Token "agentMessage" not found!
  Token "Welcome Full" not found!

Testing:     reply: "Tell me more"
  Token: "    reply" -> source.rcl
  Token: ":" -> source.rcl, undefined
  Token: " "" -> source.rcl
  Token: "Tell" -> source.rcl, entity.name.section.rcl
  Token: " me more"" -> source.rcl
  Token "reply" not found!
  Token ""Tell me more"" not found!

Testing:     dialAction: "Call Us", "+1234567890"
  Token: "    dial" -> source.rcl
  Token: "Action" -> source.rcl, undefined, undefined
  Token: ":" -> source.rcl, undefined
  Token: ""Call Us"" -> source.rcl, undefined, string.quoted.double.rcl
  Token: ", " -> source.rcl, undefined
  Token: ""+1234567890"" -> source.rcl, undefined, string.quoted.double.rcl
  Token "dialAction" not found!
  Expected ""Call Us"" to have "string.quoted.double.rcl": PASS
(pass) RCL TextMate Grammar Scope Tests > Example File Scope Validation > critical scope issues debugging [0.60ms]
315 | 
316 |       expect(agentKeyword).toBeDefined();
317 |       expect(agentName).toBeDefined();
318 | 
319 |       if (agentKeyword) {
320 |         expect(hasExpectedScope(agentKeyword, 'keyword.control.section.agent.rcl')).toBe(true);
                                                                                          ^
error: expect(received).toBe(expected)

Expected: true
Received: false

      at <anonymous> (/work/rcs/temp/custom-lexer/packages/language/tests/textmate/scope.test.ts:320:85)
(fail) RCL TextMate Grammar Scope Tests > Agent Section Scoping > agent declaration scopes correctly [0.26ms]
340 |       const enabledProp = tokens.find(t => t.text === 'enabled');
341 |       const trueValue = tokens.find(t => t.text === KW.True);
342 | 
343 |       // Test agent section
344 |       if (agentKeyword) {
345 |         expect(hasExpectedScope(agentKeyword, 'keyword.control.section.agent.rcl')).toBe(true);
                                                                                          ^
error: expect(received).toBe(expected)

Expected: true
Received: false

      at <anonymous> (/work/rcs/temp/custom-lexer/packages/language/tests/textmate/scope.test.ts:345:85)
(fail) RCL TextMate Grammar Scope Tests > Agent Section Scoping > agent with config section scopes correctly [0.25ms]
377 | 
378 |       const configTokens = tokenizeCode(configCode);
379 |       const configKeyword = configTokens.find(t => t.text === KW.Config);
380 |       expect(configKeyword).toBeDefined();
381 |       if (configKeyword) {
382 |         expect(hasExpectedScope(configKeyword, 'keyword.control.section.config.rcl')).toBe(true);
                                                                                            ^
error: expect(received).toBe(expected)

Expected: true
Received: false

      at <anonymous> (/work/rcs/temp/custom-lexer/packages/language/tests/textmate/scope.test.ts:382:87)
(fail) RCL TextMate Grammar Scope Tests > Agent Section Scoping > properly separated subsections scope correctly [0.28ms]
432 |       const separator = tokens.find(t => t.text === '/');
433 |       const module = tokens.find(t => t.text === 'Samples.one');
434 |       const asKeyword = tokens.find(t => t.text === KW.As);
435 |       const alias = tokens.find(t => t.text === 'Sample One');
436 | 
437 |       expect(importKeyword).toBeDefined();
                                  ^
error: expect(received).toBeDefined()

Received: undefined

      at <anonymous> (/work/rcs/temp/custom-lexer/packages/language/tests/textmate/scope.test.ts:437:29)
(fail) RCL TextMate Grammar Scope Tests > Import Statement Scoping > import statement scopes correctly [0.19ms]
(pass) RCL TextMate Grammar Scope Tests > Data Type Scoping > primitive values scope correctly within config [0.11ms]
510 |       const startAtom = tokens.find(t => t.text === KW.Start);
511 |       const arrow = tokens.find(t => t.text === KW.Arrow);
512 |       const target = tokens.find(t => t.text === 'Welcome');
513 | 
514 |       if (flowKeyword) {
515 |         expect(hasExpectedScope(flowKeyword, 'keyword.control.section.flow.rcl')).toBe(true);
                                                                                        ^
error: expect(received).toBe(expected)

Expected: true
Received: false

      at <anonymous> (/work/rcs/temp/custom-lexer/packages/language/tests/textmate/scope.test.ts:515:83)
(fail) RCL TextMate Grammar Scope Tests > Flow Section Scoping > flow declarations and rules scope correctly [0.57ms]
(pass) RCL TextMate Grammar Scope Tests > Context Limitation > properties only appear in proper contexts [0.30ms]
(pass) RCL TextMate Grammar Scope Tests > Context Limitation > flow rules only appear in flow contexts [0.05ms]
582 |     enabled: ${KW.True}`;
583 | 
584 |       const tokens = tokenizeCode(code);
585 | 
586 |       // Test import
587 |       expect(tokens.some(t => t.text === KW.Import && hasExpectedScope(t, 'keyword.control.import.rcl'))).toBe(true);
                                                                                                                ^
error: expect(received).toBe(expected)

Expected: true
Received: false

      at <anonymous> (/work/rcs/temp/custom-lexer/packages/language/tests/textmate/scope.test.ts:587:107)
(fail) RCL TextMate Grammar Scope Tests > Basic Import and Agent Pattern > import + simple agent scopes correctly [0.32ms]
Import tokens: [
  {
    text: "import ",
    scopes: [ "source.rcl" ],
  }, {
    text: "My Brand",
    scopes: [ "source.rcl", "entity.name.section.rcl" ],
  }, {
    text: " / ",
    scopes: [ "source.rcl" ],
  }, {
    text: "Samples",
    scopes: [ "source.rcl", "entity.name.section.rcl" ],
  }, {
    text: ".one as ",
    scopes: [ "source.rcl" ],
  }, {
    text: "Sample One",
    scopes: [ "source.rcl", "entity.name.section.rcl" ],
  }, {
    text: "import ",
    scopes: [ "source.rcl" ],
  }, {
    text: "My Brand",
    scopes: [ "source.rcl", "entity.name.section.rcl" ],
  }, {
    text: " / ",
    scopes: [ "source.rcl" ],
  }, {
    text: "Samples",
    scopes: [ "source.rcl", "entity.name.section.rcl" ],
  }, {
    text: ".two as ",
    scopes: [ "source.rcl" ],
  }, {
    text: "Sample Two",
    scopes: [ "source.rcl", "entity.name.section.rcl" ],
  }
]
605 | 
606 |       const tokens = tokenizeCode(importCode);
607 |       console.log('Import tokens:', tokens.map(t => ({ text: t.text, scopes: t.scopes })));
608 | 
609 |       // Test first import
610 |       expect(tokens.some(t => t.text === KW.Import && hasExpectedScope(t, 'keyword.control.import.rcl'))).toBe(true);
                                                                                                                ^
error: expect(received).toBe(expected)

Expected: true
Received: false

      at <anonymous> (/work/rcs/temp/custom-lexer/packages/language/tests/textmate/scope.test.ts:610:107)
(fail) RCL TextMate Grammar Scope Tests > Example.rcl Comprehensive Testing > import statements with spaces parse correctly [0.85ms]
Agent tokens: [
  {
    text: "agent",
    scopes: [ "source.rcl", "undefined", "undefined" ],
  }, {
    text: "My Brand",
    scopes: [ "source.rcl", "undefined", "entity.name.section.rcl" ],
  }, {
    text: "  brand",
    scopes: [ "source.rcl" ],
  }, {
    text: "Name",
    scopes: [ "source.rcl", "undefined", "undefined" ],
  }, {
    text: ":",
    scopes: [ "source.rcl", "undefined" ],
  }, {
    text: "\"Sample Brand\"",
    scopes: [ "source.rcl", "undefined", "string.quoted.double.rcl" ],
  }, {
    text: "displayName",
    scopes: [ "source.rcl", "undefined", "entity.other.attribute-name.rcl" ],
  }, {
    text: ": ",
    scopes: [ "source.rcl", "undefined" ],
  }, {
    text: "\"Sample Agent\"",
    scopes: [ "source.rcl", "undefined", "string.quoted.double.rcl" ],
  }
]
621 |   displayName: "Sample Agent"`;
622 | 
623 |       const tokens = tokenizeCode(agentCode);
624 |       console.log('Agent tokens:', tokens.map(t => ({ text: t.text, scopes: t.scopes })));
625 | 
626 |       expect(tokens.some(t => t.text === KW.Agent && hasExpectedScope(t, 'keyword.control.section.agent.rcl'))).toBe(true);
                                                                                                                      ^
error: expect(received).toBe(expected)

Expected: true
Received: false

      at <anonymous> (/work/rcs/temp/custom-lexer/packages/language/tests/textmate/scope.test.ts:626:113)
(fail) RCL TextMate Grammar Scope Tests > Example.rcl Comprehensive Testing > agent section with spaces in name parses correctly [0.17ms]
Atom tokens: [
  {
    text: "agent",
    scopes: [ "source.rcl", "undefined", "undefined" ],
  }, {
    text: "Test",
    scopes: [ "source.rcl", "undefined", "entity.name.section.rcl" ],
  }, {
    text: "Config",
    scopes: [ "source.rcl", "entity.name.section.rcl" ],
  }, {
    text: "    agent",
    scopes: [ "source.rcl" ],
  }, {
    text: "UseCase",
    scopes: [ "source.rcl", "undefined", "undefined" ],
  }, {
    text: ":",
    scopes: [ "source.rcl", "undefined" ],
  }, {
    text: " :TRANSACTIONAL",
    scopes: [ "source.rcl", "undefined" ],
  }, {
    text: "hostingRegion",
    scopes: [ "source.rcl", "undefined", "entity.other.attribute-name.rcl" ],
  }, {
    text: ": :NORTH_AMERICA",
    scopes: [ "source.rcl", "undefined" ],
  }
]
636 |     hostingRegion: :NORTH_AMERICA`;
637 | 
638 |       const tokens = tokenizeCode(atomCode);
639 |       console.log('Atom tokens:', tokens.map(t => ({ text: t.text, scopes: t.scopes })));
640 | 
641 |       expect(tokens.some(t => t.text === ':TRANSACTIONAL' && hasExpectedScope(t, 'constant.other.atom.rcl'))).toBe(true);
                                                                                                                    ^
error: expect(received).toBe(expected)

Expected: true
Received: false

      at <anonymous> (/work/rcs/temp/custom-lexer/packages/language/tests/textmate/scope.test.ts:641:111)
(fail) RCL TextMate Grammar Scope Tests > Example.rcl Comprehensive Testing > atom values parse correctly [0.16ms]
Embedded tokens: [
  {
    text: "agent",
    scopes: [ "source.rcl", "undefined", "undefined" ],
  }, {
    text: "Test",
    scopes: [ "source.rcl", "undefined", "entity.name.section.rcl" ],
  }, {
    text: "Defaults",
    scopes: [ "source.rcl", "entity.name.section.rcl" ],
  }, {
    text: "    postback",
    scopes: [ "source.rcl" ],
  }, {
    text: "Data",
    scopes: [ "source.rcl", "undefined", "undefined" ],
  }, {
    text: ":",
    scopes: [ "source.rcl", "undefined" ],
  }, {
    text: " $js> format @selectedOption.text ",
    scopes: [ "source.rcl", "undefined" ],
  }, {
    text: "as",
    scopes: [ "source.rcl", "undefined", "entity.other.attribute-name.rcl" ],
  }, {
    text: " :dash_case",
    scopes: [ "source.rcl", "undefined" ],
  }
]
648 |     postbackData: $js> format @selectedOption.text as :dash_case`;
649 | 
650 |       const tokens = tokenizeCode(embeddedCode);
651 |       console.log('Embedded tokens:', tokens.map(t => ({ text: t.text, scopes: t.scopes })));
652 | 
653 |       expect(tokens.some(t => t.text === KW.JsPrefix && hasExpectedScope(t, 'keyword.control.embedded.marker.js.rcl'))).toBe(true);
                                                                                                                              ^
error: expect(received).toBe(expected)

Expected: true
Received: false

      at <anonymous> (/work/rcs/temp/custom-lexer/packages/language/tests/textmate/scope.test.ts:653:121)
(fail) RCL TextMate Grammar Scope Tests > Example.rcl Comprehensive Testing > embedded expressions parse correctly [0.14ms]
Flow tokens: [
  {
    text: "agent",
    scopes: [ "source.rcl", "undefined", "undefined" ],
  }, {
    text: "Test",
    scopes: [ "source.rcl", "undefined", "entity.name.section.rcl" ],
  }, {
    text: "flow",
    scopes: [ "source.rcl", "undefined", "undefined" ],
  }, {
    text: " Default",
    scopes: [ "source.rcl", "undefined" ],
  }, {
    text: ":",
    scopes: [ "source.rcl", "undefined" ],
  }, {
    text: "start -> ",
    scopes: [ "source.rcl" ],
  }, {
    text: "Welcome",
    scopes: [ "source.rcl", "entity.name.section.rcl" ],
  }, {
    text: ":",
    scopes: [ "source.rcl", "undefined" ],
  }, {
    text: "error -> ",
    scopes: [ "source.rcl" ],
  }, {
    text: "Error Message",
    scopes: [ "source.rcl", "entity.name.section.rcl" ],
  }
]
660 |     :error -> Error Message`;
661 | 
662 |       const tokens = tokenizeCode(flowCode);
663 |       console.log('Flow tokens:', tokens.map(t => ({ text: t.text, scopes: t.scopes })));
664 | 
665 |       expect(tokens.some(t => t.text === KW.Flow && hasExpectedScope(t, 'keyword.control.section.flow.rcl'))).toBe(true);
                                                                                                                    ^
error: expect(received).toBe(expected)

Expected: true
Received: false

      at <anonymous> (/work/rcs/temp/custom-lexer/packages/language/tests/textmate/scope.test.ts:665:111)
(fail) RCL TextMate Grammar Scope Tests > Example.rcl Comprehensive Testing > flow rules with atoms parse correctly [0.34ms]
AgentMessage tokens: [
  {
    text: "agent",
    scopes: [ "source.rcl", "undefined", "undefined" ],
  }, {
    text: "Test",
    scopes: [ "source.rcl", "undefined", "entity.name.section.rcl" ],
  }, {
    text: "Messages",
    scopes: [ "source.rcl", "entity.name.section.rcl" ],
  }, {
    text: "    agent",
    scopes: [ "source.rcl" ],
  }, {
    text: "Message Welcome Full",
    scopes: [ "source.rcl", "entity.name.section.rcl" ],
  }, {
    text: "      message",
    scopes: [ "source.rcl" ],
  }, {
    text: "TrafficType",
    scopes: [ "source.rcl", "undefined", "undefined" ],
  }, {
    text: ":",
    scopes: [ "source.rcl", "undefined" ],
  }, {
    text: " :TRANSACTION",
    scopes: [ "source.rcl", "undefined" ],
  }
]
676 |       messageTrafficType: :TRANSACTION`;
677 | 
678 |       const tokens = tokenizeCode(agentMessageCode);
679 |       console.log('AgentMessage tokens:', tokens.map(t => ({ text: t.text, scopes: t.scopes })));
680 | 
681 |       expect(tokens.some(t => t.text === KW.AgentMessage && hasExpectedScope(t, 'keyword.control.section.agentmessage.rcl'))).toBe(true);
                                                                                                                                    ^
error: expect(received).toBe(expected)

Expected: true
Received: false

      at <anonymous> (/work/rcs/temp/custom-lexer/packages/language/tests/textmate/scope.test.ts:681:127)
(fail) RCL TextMate Grammar Scope Tests > Example.rcl Comprehensive Testing > agentMessage keyword recognition [0.30ms]
Action tokens: [
  {
    text: "agent",
    scopes: [ "source.rcl", "undefined", "undefined" ],
  }, {
    text: "Test",
    scopes: [ "source.rcl", "undefined", "entity.name.section.rcl" ],
  }, {
    text: "Messages",
    scopes: [ "source.rcl", "entity.name.section.rcl" ],
  }, {
    text: "    message ",
    scopes: [ "source.rcl" ],
  }, {
    text: "Welcome",
    scopes: [ "source.rcl", "entity.name.section.rcl" ],
  }, {
    text: "      suggestions",
    scopes: [ "source.rcl" ],
  }, {
    text: "        reply",
    scopes: [ "source.rcl" ],
  }, {
    text: ":",
    scopes: [ "source.rcl", "undefined" ],
  }, {
    text: " \"",
    scopes: [ "source.rcl" ],
  }, {
    text: "Tell",
    scopes: [ "source.rcl", "entity.name.section.rcl" ],
  }, {
    text: " me more\"",
    scopes: [ "source.rcl" ],
  }, {
    text: "        dial",
    scopes: [ "source.rcl" ],
  }, {
    text: "Action",
    scopes: [ "source.rcl", "undefined", "undefined" ],
  }, {
    text: ":",
    scopes: [ "source.rcl", "undefined" ],
  }, {
    text: "\"Call Us\"",
    scopes: [ "source.rcl", "undefined", "string.quoted.double.rcl" ],
  }, {
    text: ", ",
    scopes: [ "source.rcl", "undefined" ],
  }, {
    text: "\"+1234567890\"",
    scopes: [ "source.rcl", "undefined", "string.quoted.double.rcl" ],
  }, {
    text: "shareLocation",
    scopes: [ "source.rcl", "undefined", "entity.other.attribute-name.rcl" ],
  }, {
    text: ": ",
    scopes: [ "source.rcl", "undefined" ],
  }, {
    text: "\"Share Location\"",
    scopes: [ "source.rcl", "undefined", "string.quoted.double.rcl" ],
  }
]
693 |         shareLocation: "Share Location"`;
694 | 
695 |       const tokens = tokenizeCode(actionCode);
696 |       console.log('Action tokens:', tokens.map(t => ({ text: t.text, scopes: t.scopes })));
697 | 
698 |       expect(tokens.some(t => t.text === KW.Message && hasExpectedScope(t, 'keyword.control.section.message.rcl'))).toBe(true);
                                                                                                                          ^
error: expect(received).toBe(expected)

Expected: true
Received: false

      at <anonymous> (/work/rcs/temp/custom-lexer/packages/language/tests/textmate/scope.test.ts:698:117)
(fail) RCL TextMate Grammar Scope Tests > Example.rcl Comprehensive Testing > action keywords parse correctly [0.34ms]
Example file tokens (first 20): [
  {
    text: "import ",
    scopes: [ "source.rcl" ],
  }, {
    text: "My Brand",
    scopes: [ "source.rcl", "entity.name.section.rcl" ],
  }, {
    text: " / ",
    scopes: [ "source.rcl" ],
  }, {
    text: "Samples",
    scopes: [ "source.rcl", "entity.name.section.rcl" ],
  }, {
    text: ".one as ",
    scopes: [ "source.rcl" ],
  }, {
    text: "Sample One",
    scopes: [ "source.rcl", "entity.name.section.rcl" ],
  }, {
    text: "import ",
    scopes: [ "source.rcl" ],
  }, {
    text: "My Brand",
    scopes: [ "source.rcl", "entity.name.section.rcl" ],
  }, {
    text: " / ",
    scopes: [ "source.rcl" ],
  }, {
    text: "Samples",
    scopes: [ "source.rcl", "entity.name.section.rcl" ],
  }, {
    text: ".two as ",
    scopes: [ "source.rcl" ],
  }, {
    text: "Sample Two",
    scopes: [ "source.rcl", "entity.name.section.rcl" ],
  }, {
    text: "agent",
    scopes: [ "source.rcl", "undefined", "undefined" ],
  }, {
    text: "My Brand",
    scopes: [ "source.rcl", "undefined", "entity.name.section.rcl" ],
  }, {
    text: "  brand",
    scopes: [ "source.rcl" ],
  }, {
    text: "Name",
    scopes: [ "source.rcl", "undefined", "undefined" ],
  }, {
    text: ":",
    scopes: [ "source.rcl", "undefined" ],
  }, {
    text: "\"Sample Brand\"",
    scopes: [ "source.rcl", "undefined", "string.quoted.double.rcl" ],
  }, {
    text: "displayName",
    scopes: [ "source.rcl", "undefined", "entity.other.attribute-name.rcl" ],
  }, {
    text: ": ",
    scopes: [ "source.rcl", "undefined" ],
  }
]
Import keywords found: 2
Agent keywords found: 1
First import keyword scopes: [ "source.rcl" ]
First agent keyword scopes: [ "source.rcl", "undefined", "undefined" ]
(pass) RCL TextMate Grammar Scope Tests > Example.rcl Comprehensive Testing > complete example file sections [3.16ms]

tests/lsp/hover.test.ts:
Initialized section type registry with 11 section types
Initialized section type registry with 11 section types
(pass) RCL Hover Provider Tests > Keyword Hover Information > provides hover info for agent keyword [57.99ms]
(pass) RCL Hover Provider Tests > Keyword Hover Information > provides hover info for flow keyword [1.32ms]
(pass) RCL Hover Provider Tests > Keyword Hover Information > provides hover info for import keyword [0.91ms]
(pass) RCL Hover Provider Tests > Property Hover Information > provides hover info for agent properties [0.71ms]
(pass) RCL Hover Provider Tests > Property Hover Information > provides hover info for config properties [0.58ms]
(pass) RCL Hover Provider Tests > Property Hover Information > provides hover info for message properties [0.49ms]
(pass) RCL Hover Provider Tests > Value Hover Information > provides hover info for boolean values [0.23ms]
(pass) RCL Hover Provider Tests > Value Hover Information > provides hover info for atom values [0.37ms]
(pass) RCL Hover Provider Tests > Value Hover Information > provides hover info for string values [0.41ms]
(pass) RCL Hover Provider Tests > Reference Hover Information > provides hover info for flow rule references [0.52ms]
(pass) RCL Hover Provider Tests > Reference Hover Information > provides hover info for import references [0.77ms]
(pass) RCL Hover Provider Tests > Section Hover Information > provides hover info for section names [0.68ms]
(pass) RCL Hover Provider Tests > Section Hover Information > provides hover info for message names [0.32ms]
(pass) RCL Hover Provider Tests > Context-Aware Hover > provides different hover info based on context [0.39ms]
332 |         textDocument: { uri: document.uri.toString() },
333 |         position: Position.create(2, 10) // Inside invalid syntax
334 |       } as HoverParams);
335 | 
336 |       // Should handle gracefully without crashing
337 |       expect(invalidHover).toBeDefined();
                                 ^
error: expect(received).toBeDefined()

Received: undefined

      at <anonymous> (/work/rcs/temp/custom-lexer/packages/language/tests/lsp/hover.test.ts:337:28)
(fail) RCL Hover Provider Tests > Error Handling in Hover > handles hover on invalid syntax gracefully [0.51ms]
346 |         textDocument: { uri: document.uri.toString() },
347 |         position: Position.create(2, 18) // Inside 'nonexistent_message'
348 |       } as HoverParams);
349 | 
350 |       // Should handle missing references gracefully
351 |       expect(missingRefHover).toBeDefined();
                                    ^
error: expect(received).toBeDefined()

Received: undefined

      at <anonymous> (/work/rcs/temp/custom-lexer/packages/language/tests/lsp/hover.test.ts:351:31)
(fail) RCL Hover Provider Tests > Error Handling in Hover > handles hover on missing references [0.42ms]
366 |         textDocument: { uri: document.uri.toString() },
367 |         position: Position.create(1, 20) // Near end
368 |       } as HoverParams);
369 | 
370 |       // Should handle boundary conditions
371 |       expect(startHover).toBeDefined();
                               ^
error: expect(received).toBeDefined()

Received: undefined

      at <anonymous> (/work/rcs/temp/custom-lexer/packages/language/tests/lsp/hover.test.ts:371:26)
(fail) RCL Hover Provider Tests > Error Handling in Hover > handles hover at file boundaries [0.41ms]
(pass) RCL Hover Provider Tests > Hover Content Quality > provides structured hover content [0.34ms]
(pass) RCL Hover Provider Tests > Hover Content Quality > provides markdown-formatted hover content [0.31ms]

tests/lsp/completion.test.ts:
Initialized section type registry with 11 section types
Initialized section type registry with 11 section types
32 |       expect(completions?.items).toBeDefined();
33 | 
34 |       const items = completions!.items;
35 |       const agentCompletion = items.find(item => item.label === 'agent');
36 |       expect(agentCompletion).toBeDefined();
37 |       expect(agentCompletion?.insertText).toContain('agent');
                                               ^
error: Received value must be an array type, or both received and expected values must be strings.
      at <anonymous> (/work/rcs/temp/custom-lexer/packages/language/tests/lsp/completion.test.ts:37:43)
(fail) RCL Completion Provider Tests > Section Keywords Completion > suggests agent keywords at file level [32.99ms]
(pass) RCL Completion Provider Tests > Section Keywords Completion > suggests import keywords at file start [0.78ms]
64 |         position: Position.create(2, 5)
65 |       } as CompletionParams);
66 | 
67 |       if (completions?.items) {
68 |         const configCompletion = completions.items.find(item => item.label === 'config');
69 |         expect(configCompletion).toBeDefined();
                                      ^
error: expect(received).toBeDefined()

Received: undefined

      at <anonymous> (/work/rcs/temp/custom-lexer/packages/language/tests/lsp/completion.test.ts:69:34)
(fail) RCL Completion Provider Tests > Section Keywords Completion > suggests subsection keywords within agent [1.16ms]
82 |         position: Position.create(2, 5)
83 |       } as CompletionParams);
84 | 
85 |       if (completions?.items) {
86 |         const flowCompletion = completions.items.find(item => item.label === 'flow');
87 |         expect(flowCompletion).toBeDefined();
                                    ^
error: expect(received).toBeDefined()

Received: undefined

      at <anonymous> (/work/rcs/temp/custom-lexer/packages/language/tests/lsp/completion.test.ts:87:32)
(fail) RCL Completion Provider Tests > Section Keywords Completion > suggests flow keywords within agent [0.62ms]
101 |         position: Position.create(1, 5)
102 |       } as CompletionParams);
103 | 
104 |       if (completions?.items) {
105 |         const nameCompletion = completions.items.find(item => item.label === 'name');
106 |         expect(nameCompletion).toBeDefined();
                                     ^
error: expect(received).toBeDefined()

Received: undefined

      at <anonymous> (/work/rcs/temp/custom-lexer/packages/language/tests/lsp/completion.test.ts:106:32)
(fail) RCL Completion Provider Tests > Property Completion > suggests common agent properties [0.51ms]
123 |       if (completions?.items) {
124 |         const webhookCompletion = completions.items.find(item =>
125 |           item.label.includes('webhook') || item.label.includes('url')
126 |         );
127 |         // Should suggest config-specific properties
128 |         expect(completions.items.length).toBeGreaterThan(0);
                                               ^
error: expect(received).toBeGreaterThan(expected)

Expected: > 0
Received: 0

      at <anonymous> (/work/rcs/temp/custom-lexer/packages/language/tests/lsp/completion.test.ts:128:42)
(fail) RCL Completion Provider Tests > Property Completion > suggests config properties within config section [0.61ms]
143 |         position: Position.create(4, 13)
144 |       } as CompletionParams);
145 | 
146 |       if (completions?.items) {
147 |         const textCompletion = completions.items.find(item => item.label === 'text');
148 |         expect(textCompletion).toBeDefined();
                                     ^
error: expect(received).toBeDefined()

Received: undefined

      at <anonymous> (/work/rcs/temp/custom-lexer/packages/language/tests/lsp/completion.test.ts:148:32)
(fail) RCL Completion Provider Tests > Property Completion > suggests message properties within messages [0.53ms]
162 |         position: Position.create(1, 14)
163 |       } as CompletionParams);
164 | 
165 |       if (completions?.items) {
166 |         const trueCompletion = completions.items.find(item => item.label === 'True');
167 |         expect(trueCompletion).toBeDefined();
                                     ^
error: expect(received).toBeDefined()

Received: undefined

      at <anonymous> (/work/rcs/temp/custom-lexer/packages/language/tests/lsp/completion.test.ts:167:32)
(fail) RCL Completion Provider Tests > Value Completion > suggests boolean values [0.57ms]
179 |         position: Position.create(1, 15)
180 |       } as CompletionParams);
181 | 
182 |       if (completions?.items) {
183 |         // Should suggest common atom values
184 |         expect(completions.items.some(item => item.label.startsWith(':'))).toBe(true);
                                                                                 ^
error: expect(received).toBe(expected)

Expected: true
Received: false

      at <anonymous> (/work/rcs/temp/custom-lexer/packages/language/tests/lsp/completion.test.ts:184:76)
(fail) RCL Completion Provider Tests > Value Completion > suggests atom values [0.91ms]
199 |         position: Position.create(2, 19)
200 |       } as CompletionParams);
201 | 
202 |       if (completions?.items) {
203 |         // Should suggest message names and flow targets
204 |         expect(completions.items.length).toBeGreaterThan(0);
                                               ^
error: expect(received).toBeGreaterThan(expected)

Expected: > 0
Received: 0

      at <anonymous> (/work/rcs/temp/custom-lexer/packages/language/tests/lsp/completion.test.ts:204:42)
(fail) RCL Completion Provider Tests > Flow Completion > suggests flow rule targets [0.81ms]
218 |       } as CompletionParams);
219 | 
220 |       if (completions?.items) {
221 |         const startAtom = completions.items.find(item => item.label === ':start');
222 |         const endAtom = completions.items.find(item => item.label === ':end');
223 |         expect(startAtom || endAtom).toBeDefined();
                                           ^
error: expect(received).toBeDefined()

Received: undefined

      at <anonymous> (/work/rcs/temp/custom-lexer/packages/language/tests/lsp/completion.test.ts:223:38)
(fail) RCL Completion Provider Tests > Flow Completion > suggests flow atoms [0.55ms]
236 |         position: Position.create(0, 8)
237 |       } as CompletionParams);
238 | 
239 |       if (completions?.items) {
240 |         // Should suggest common namespaces
241 |         expect(completions.items.length).toBeGreaterThan(0);
                                               ^
error: expect(received).toBeGreaterThan(expected)

Expected: > 0
Received: 0

      at <anonymous> (/work/rcs/temp/custom-lexer/packages/language/tests/lsp/completion.test.ts:241:42)
(fail) RCL Completion Provider Tests > Import Completion > suggests namespace completion [0.71ms]
(pass) RCL Completion Provider Tests > Import Completion > suggests alias keyword completion [0.61ms]
273 |         position: Position.create(2, 11)
274 |       } as CompletionParams);
275 | 
276 |       if (configCompletions?.items) {
277 |         // Should suggest config-specific properties
278 |         expect(configCompletions.items.length).toBeGreaterThan(0);
                                                     ^
error: expect(received).toBeGreaterThan(expected)

Expected: > 0
Received: 0

      at <anonymous> (/work/rcs/temp/custom-lexer/packages/language/tests/lsp/completion.test.ts:278:48)
(fail) RCL Completion Provider Tests > Context-Aware Completion > completion is context-aware for different sections [0.51ms]
297 |       if (completions?.items) {
298 |         // Should suggest values, not properties
299 |         const booleanValues = completions.items.filter(item =>
300 |           item.label === 'True' || item.label === 'False'
301 |         );
302 |         expect(booleanValues.length).toBeGreaterThan(0);
                                           ^
error: expect(received).toBeGreaterThan(expected)

Expected: > 0
Received: 0

      at <anonymous> (/work/rcs/temp/custom-lexer/packages/language/tests/lsp/completion.test.ts:302:38)
(fail) RCL Completion Provider Tests > Context-Aware Completion > completion works after colons [0.56ms]
320 |       } as CompletionParams);
321 | 
322 |       // Should still provide completions despite syntax errors above
323 |       expect(completions).toBeDefined();
324 |       if (completions?.items) {
325 |         expect(completions.items.length).toBeGreaterThan(0);
                                               ^
error: expect(received).toBeGreaterThan(expected)

Expected: > 0
Received: 0

      at <anonymous> (/work/rcs/temp/custom-lexer/packages/language/tests/lsp/completion.test.ts:325:42)
(fail) RCL Completion Provider Tests > Error Recovery in Completion > provides completion even with syntax errors [0.42ms]
(pass) RCL Completion Provider Tests > Error Recovery in Completion > handles incomplete statements gracefully [0.53ms]
(pass) RCL Completion Provider Tests > Snippet Completion > provides agent snippet completion [0.30ms]
(pass) RCL Completion Provider Tests > Snippet Completion > provides flow snippet completion [0.44ms]
(pass) RCL Completion Provider Tests > Snippet Completion > provides message snippet completion [0.45ms]

tests/lsp/linking.test.ts:
Initialized section type registry with 11 section types
(pass) Linking tests (rcl-test grammar) > linking of agent definition (rcl-test) [35.10ms]

tests/parser/specification-compliance.test.ts:
28 |     :start -> Welcome`;
29 | 
30 |       const result = parser.parse(input);
31 | 
32 |       expect(result.ast).toBeDefined();
33 |       expect(result.ast?.agentDefinition).toBeDefined();
                                               ^
error: expect(received).toBeDefined()

Received: undefined

      at <anonymous> (/work/rcs/temp/custom-lexer/packages/language/tests/parser/specification-compliance.test.ts:33:43)
(fail) Formal Specification Compliance > RclFile Structure > should parse minimal agent definition according to specification [0.78ms]
(pass) Formal Specification Compliance > RclFile Structure > should require agent definition according to specification [0.03ms]
63 |       const result = parser.parse(input);
64 | 
65 |       expect(result.ast?.imports).toHaveLength(2);
66 |       expect(result.ast?.imports[0].importPath).toEqual(['Shared', 'Common Utils']);
67 |       expect(result.ast?.imports[1].alias).toBe('Templates');
68 |       expect(result.ast?.agentDefinition?.name).toBe('Test Agent');
                                                     ^
error: expect(received).toBe(expected)

Expected: "Test Agent"
Received: undefined

      at <anonymous> (/work/rcs/temp/custom-lexer/packages/language/tests/parser/specification-compliance.test.ts:68:49)
(fail) Formal Specification Compliance > RclFile Structure > should parse imports before agent definition [0.22ms]
79 |   flow Flow:
80 |     :start -> Hello`;
81 | 
82 |       const result = parser.parse(input);
83 | 
84 |       expect(result.errors.some(e => e.message.includes('displayName is required'))).toBe(true);
                                                                                          ^
error: expect(received).toBe(expected)

Expected: true
Received: false

      at <anonymous> (/work/rcs/temp/custom-lexer/packages/language/tests/parser/specification-compliance.test.ts:84:86)
(fail) Formal Specification Compliance > Agent Definition Structure > should enforce required displayName [0.19ms]
 95 |   flow Flow:
 96 |     :start -> Hello`;
 97 | 
 98 |       const result = parser.parse(input);
 99 | 
100 |       expect(result.ast?.agentDefinition?.brandName).toBe('ACME Corp');
                                                           ^
error: expect(received).toBe(expected)

Expected: "ACME Corp"
Received: undefined

      at <anonymous> (/work/rcs/temp/custom-lexer/packages/language/tests/parser/specification-compliance.test.ts:100:54)
(fail) Formal Specification Compliance > Agent Definition Structure > should allow optional brandName [0.22ms]
108 |     Hello:
109 |       text "Hi"`;
110 | 
111 |       const result = parser.parse(input);
112 | 
113 |       expect(result.errors.some(e => e.message.includes('at least one flow'))).toBe(true);
                                                                                     ^
error: expect(received).toBe(expected)

Expected: true
Received: false

      at <anonymous> (/work/rcs/temp/custom-lexer/packages/language/tests/parser/specification-compliance.test.ts:113:80)
(fail) Formal Specification Compliance > Agent Definition Structure > should enforce at least one flow section [0.16ms]
120 |   flow Flow:
121 |     :start -> Hello`;
122 | 
123 |       const result = parser.parse(input);
124 | 
125 |       expect(result.errors.some(e => e.message.includes('messages section'))).toBe(true);
                                                                                    ^
error: expect(received).toBe(expected)

Expected: true
Received: false

      at <anonymous> (/work/rcs/temp/custom-lexer/packages/language/tests/parser/specification-compliance.test.ts:125:79)
(fail) Formal Specification Compliance > Agent Definition Structure > should enforce exactly one messages section [0.07ms]
144 |       const result = parser.parse(input);
145 | 
146 |       expect(result.ast).toBeDefined();
147 |       // Verify text shortcut was parsed correctly
148 |       const messages = result.ast?.agentDefinition?.messages;
149 |       expect(messages).toBeDefined();
                             ^
error: expect(received).toBeDefined()

Received: undefined

      at <anonymous> (/work/rcs/temp/custom-lexer/packages/language/tests/parser/specification-compliance.test.ts:149:24)
(fail) Formal Specification Compliance > Message Shortcuts Implementation > should parse text shortcuts [0.19ms]
(pass) Formal Specification Compliance > Message Shortcuts Implementation > should parse richCard shortcuts with all modifiers [0.58ms]
(pass) Formal Specification Compliance > Message Shortcuts Implementation > should parse carousel shortcuts [0.28ms]
(pass) Formal Specification Compliance > Message Shortcuts Implementation > should parse file shortcuts [0.55ms]
(pass) Formal Specification Compliance > Message Shortcuts Implementation > should handle message traffic type prefixes [0.21ms]
(pass) Formal Specification Compliance > Flow System Compliance > should parse multi-arrow flow transitions [0.15ms]
(pass) Formal Specification Compliance > Flow System Compliance > should parse flow rules with with clauses [0.08ms]
(pass) Formal Specification Compliance > Flow System Compliance > should parse conditional flows with when clauses [0.29ms]
(pass) Formal Specification Compliance > Type Tag Parsing > should parse basic type tags [0.49ms]
(pass) Formal Specification Compliance > Type Tag Parsing > should parse type tags with modifiers [0.60ms]
(pass) Formal Specification Compliance > Collection Types > should parse inline lists [0.35ms]
(pass) Formal Specification Compliance > Collection Types > should parse block lists [0.12ms]
(pass) Formal Specification Compliance > Collection Types > should parse mapped types [0.40ms]
(pass) Formal Specification Compliance > Embedded Expression Support > should parse single-line embedded expressions [0.08ms]
(pass) Formal Specification Compliance > Embedded Expression Support > should parse multi-line embedded expressions [0.57ms]
(pass) Formal Specification Compliance > Import Resolution > should parse simple imports [0.18ms]
(pass) Formal Specification Compliance > Import Resolution > should parse namespaced imports [0.07ms]
(pass) Formal Specification Compliance > Import Resolution > should parse imports with aliases [0.22ms]
(pass) Formal Specification Compliance > Import Resolution > should parse imports with source [0.20ms]

tests/performance/language-performance.test.ts:
Initialized section type registry with 11 section types
 99 | 
100 |       // Should parse large file efficiently (less than 2 seconds for 50 agents)
101 |       expect(parsingTime).toBeLessThan(2000);
102 | 
103 |       // Should successfully parse the content
104 |       expect(result.errors).toHaveLength(0);
                                  ^
error: expect(received).toHaveLength(expected)

Expected length: 0
Received length: 900

      at <anonymous> (/work/rcs/temp/custom-lexer/packages/language/tests/performance/language-performance.test.ts:104:29)
(fail) RCL Language Performance Tests > Parser Performance > parses large RCL files efficiently [61.56ms]
Parsed deeply nested structure in 0.72ms
(pass) RCL Language Performance Tests > Parser Performance > handles deeply nested structures efficiently [0.91ms]
193 |       // Should handle many flow rules efficiently
194 |       expect(parsingTime).toBeLessThan(1000);
195 | 
196 |       expect(result.ast).toBeDefined();
197 |       const flowSection = result.ast!.sections.find(s => s.sectionType === 'flow');
198 |       expect(flowSection).toBeDefined();
                                ^
error: expect(received).toBeDefined()

Received: undefined

      at <anonymous> (/work/rcs/temp/custom-lexer/packages/language/tests/performance/language-performance.test.ts:198:27)
(fail) RCL Language Performance Tests > Parser Performance > processes many flow rules efficiently [2.71ms]
Tokenized 68669 characters (19999 tokens) in 80.49ms
(pass) RCL Language Performance Tests > Lexer Performance > tokenizes large files efficiently [80.65ms]
Tokenized complex patterns in 0.64ms
(pass) RCL Language Performance Tests > Lexer Performance > handles complex token patterns efficiently [0.76ms]
Initialized section type registry with 11 section types
Created RCL services in 0.20ms
(pass) RCL Language Performance Tests > LSP Performance > provides completion quickly for large files [0.28ms]
Memory increase: 0.00MB for 10 large ASTs
(pass) RCL Language Performance Tests > Memory Usage > maintains reasonable memory usage for large ASTs [42.75ms]
Processed malformed input with 2100 errors in 15.70ms
(pass) RCL Language Performance Tests > Stress Tests > handles malformed input without performance degradation [15.84ms]
Parsed extremely long lines in 0.83ms
(pass) RCL Language Performance Tests > Stress Tests > handles extremely long lines efficiently [0.88ms]
1000 rapid parses completed in 60.58ms (avg: 0.061ms per parse)
(pass) RCL Language Performance Tests > Stress Tests > handles rapid successive parsing calls [61.02ms]
Scaling analysis: 10 sections: 0.87ms, 50 sections: 3.88ms, 100 sections: 7.82ms, 200 sections: 15.99ms
Average time/size ratio: 0.97
(pass) RCL Language Performance Tests > Scaling Characteristics > parsing time scales linearly with file size [30.97ms]

tests/validation/semantic-validation.test.ts:
Initialized section type registry with 11 section types
24 |     description: "Test agent without required name"`);
25 | 
26 |       const validationErrors = (document.diagnostics || []).filter(d => d.severity === 1); // Error severity
27 | 
28 |       // Should warn or error about missing required properties like 'name'
29 |       expect(document.parseResult.parserErrors).toHaveLength(0); // No parser errors
                                                     ^
error: expect(received).toHaveLength(expected)

Expected length: 0
Received length: 1

      at <anonymous> (/work/rcs/temp/custom-lexer/packages/language/tests/validation/semantic-validation.test.ts:29:49)
(fail) RCL Semantic Validation Tests > Agent Definition Validation > validates required agent properties [18.80ms]
(pass) RCL Semantic Validation Tests > Agent Definition Validation > validates agent property types [0.39ms]
(pass) RCL Semantic Validation Tests > Agent Definition Validation > validates duplicate agent definitions [0.25ms]
(pass) RCL Semantic Validation Tests > Flow Validation > validates flow rule references [0.29ms]
(pass) RCL Semantic Validation Tests > Flow Validation > validates circular flow dependencies [0.38ms]
(pass) RCL Semantic Validation Tests > Flow Validation > validates unreachable flow states [0.36ms]
(pass) RCL Semantic Validation Tests > Message Validation > validates required message properties [0.31ms]
(pass) RCL Semantic Validation Tests > Message Validation > validates message property constraints [0.26ms]
(pass) RCL Semantic Validation Tests > Message Validation > validates duplicate message names [0.27ms]
(pass) RCL Semantic Validation Tests > Import Validation > validates import references [0.37ms]
269 |     selfRef: Self.property`);
270 | 
271 |       const validationErrors = (document.diagnostics || []).filter(d => d.severity === 1);
272 | 
273 |       // Basic import structure should be valid
274 |       expect(document.parseResult.parserErrors).toHaveLength(0);
                                                      ^
error: expect(received).toHaveLength(expected)

Expected length: 0
Received length: 1

      at <anonymous> (/work/rcs/temp/custom-lexer/packages/language/tests/validation/semantic-validation.test.ts:274:49)
(fail) RCL Semantic Validation Tests > Import Validation > validates circular import dependencies [0.34ms]
(pass) RCL Semantic Validation Tests > Import Validation > validates import alias conflicts [0.12ms]
(pass) RCL Semantic Validation Tests > Configuration Validation > validates config property types [0.46ms]
330 | 
331 |       const validationErrors = (document.diagnostics || []).filter(d => d.severity === 1);
332 | 
333 |       // Might warn about missing essential config properties
334 |       // This depends on the specific validation rules implemented
335 |       expect(document.parseResult.parserErrors).toHaveLength(0);
                                                      ^
error: expect(received).toHaveLength(expected)

Expected length: 0
Received length: 1

      at <anonymous> (/work/rcs/temp/custom-lexer/packages/language/tests/validation/semantic-validation.test.ts:335:49)
(fail) RCL Semantic Validation Tests > Configuration Validation > validates required config properties [0.43ms]
(pass) RCL Semantic Validation Tests > Cross-Section Validation > validates consistency between sections [0.72ms]
379 |             config: privateConfig`);
380 | 
381 |       const validationErrors = (document.diagnostics || []).filter(d => d.severity === 1);
382 | 
383 |       // Should validate scope and access rules
384 |       expect(document.parseResult.parserErrors).toHaveLength(0);
                                                      ^
error: expect(received).toHaveLength(expected)

Expected length: 0
Received length: 1

      at <anonymous> (/work/rcs/temp/custom-lexer/packages/language/tests/validation/semantic-validation.test.ts:384:49)
(fail) RCL Semantic Validation Tests > Cross-Section Validation > validates scope and visibility rules [0.62ms]
(pass) RCL Semantic Validation Tests > Type System Validation > validates atom value formats [0.38ms]
(pass) RCL Semantic Validation Tests > Type System Validation > validates number ranges and formats [0.38ms]
437 |     specialChars: "Special chars: @#$%^&*()"`);
438 | 
439 |       const validationErrors = (document.diagnostics || []).filter(d => d.severity === 1);
440 | 
441 |       // String validation should generally pass for well-formed strings
442 |       expect(document.parseResult.parserErrors).toHaveLength(0);
                                                      ^
error: expect(received).toHaveLength(expected)

Expected length: 0
Received length: 1

      at <anonymous> (/work/rcs/temp/custom-lexer/packages/language/tests/validation/semantic-validation.test.ts:442:49)
(fail) RCL Semantic Validation Tests > Type System Validation > validates string content and encoding [0.92ms]
506 | 
507 |       const validationErrors = (document.diagnostics || []).filter(d => d.severity === 1);
508 |       const validationWarnings = (document.diagnostics || []).filter(d => d.severity === 2);
509 | 
510 |       // A well-formed complete agent should have minimal errors
511 |       expect(document.parseResult.parserErrors).toHaveLength(0);
                                                      ^
error: expect(received).toHaveLength(expected)

Expected length: 0
Received length: 1

      at <anonymous> (/work/rcs/temp/custom-lexer/packages/language/tests/validation/semantic-validation.test.ts:511:49)
(fail) RCL Semantic Validation Tests > Complex Validation Scenarios > validates complete agent with all sections [0.82ms]

85 tests failed:
(fail) Comprehensive RCL Parser Tests > Agent Section Parsing > parses complex agent with all subsections [1.68ms]
(fail) Comprehensive RCL Parser Tests > Agent Section Parsing > parses agent with validation attributes [0.59ms]
(fail) Comprehensive RCL Parser Tests > Import Statement Parsing > handles import edge cases [0.96ms]
(fail) Comprehensive RCL Parser Tests > Flow Section Parsing > parses complex flow rules [0.53ms]
(fail) Comprehensive RCL Parser Tests > Flow Section Parsing > parses flow with attributes and complex targets [0.24ms]
(fail) Comprehensive RCL Parser Tests > Message Section Parsing > parses complex message definitions [0.64ms]
(fail) Comprehensive RCL Parser Tests > Nested Structure Parsing > parses deeply nested sections [0.60ms]
(fail) Comprehensive RCL Parser Tests > AST Utility Functions > AST utilities work correctly [0.73ms]
(fail) Comprehensive RCL Parser Tests > Value Type Validation > correctly identifies all value types [0.42ms]
(fail) RCL Lexer + Parser Integration > Complete Pipeline > should handle imports and complex structure [0.51ms]
(fail) Error Handling Improvements > should provide clear error messages for malformed expressions [0.02ms]
(fail) Discrepancy Validation > Critical Issue #1: Multi-line Expression Syntax > FIXED: Multi-line expressions now use indentation, not braces [0.39ms]
(fail) Discrepancy Validation > Critical Issue #2: Missing Message Shortcuts > FIXED: Text shortcuts are fully implemented [0.64ms]
(fail) Discrepancy Validation > Critical Issue #2: Missing Message Shortcuts > FIXED: RichCard shortcuts with all modifiers work [0.80ms]
(fail) Discrepancy Validation > Critical Issue #2: Missing Message Shortcuts > FIXED: Carousel shortcuts are implemented [0.35ms]
(fail) Discrepancy Validation > Critical Issue #2: Missing Message Shortcuts > FIXED: File shortcuts (rbmFile, file) are implemented [0.72ms]
(fail) Discrepancy Validation > Critical Issue #2: Missing Message Shortcuts > FIXED: Action shortcuts in suggestions work [1.03ms]
(fail) Discrepancy Validation > Critical Issue #3: Parser Structure Mismatch > FIXED: Parser enforces required AgentDefinition hierarchy [0.23ms]
(fail) Discrepancy Validation > Critical Issue #3: Parser Structure Mismatch > FIXED: Required displayName is enforced [0.17ms]
(fail) Discrepancy Validation > Critical Issue #3: Parser Structure Mismatch > FIXED: At least one flow section is enforced [0.15ms]
(fail) Discrepancy Validation > Critical Issue #3: Parser Structure Mismatch > FIXED: Exactly one messages section is enforced [0.14ms]
(fail) Discrepancy Validation > Critical Issue #4: Type Tag Implementation > FIXED: Type tags are properly parsed [0.66ms]
(fail) Discrepancy Validation > Critical Issue #4: Type Tag Implementation > FIXED: Type tags with modifiers work [0.89ms]
(fail) Discrepancy Validation > Critical Issue #5: Flow System Compliance > FIXED: Multi-arrow transitions work (A -> B -> C) [0.36ms]
(fail) Discrepancy Validation > Critical Issue #5: Flow System Compliance > FIXED: With clauses for parameter passing work [0.40ms]
(fail) Discrepancy Validation > Critical Issue #5: Flow System Compliance > FIXED: When clauses for conditional flows work [0.41ms]
(fail) Discrepancy Validation > Integration Test: Complete Specification Compliance > COMPREHENSIVE: All fixes work together in complex example [12.44ms]
(fail) Formal Specification Examples > Section 3: Syntactic Examples > RclFile Structure Example (Lines 228-246) [0.39ms]
(fail) Formal Specification Examples > Section 3: Syntactic Examples > Import Statement Examples (Lines 234-235) [0.32ms]
(fail) Formal Specification Examples > Section 3: Syntactic Examples > Flow Rule Examples (Lines 277-295) [0.41ms]
(fail) Formal Specification Examples > Section 5: Data Type Examples > Basic Value Types [0.28ms]
(fail) Formal Specification Examples > Section 5: Data Type Examples > Collection Types [0.76ms]
(fail) Formal Specification Examples > Section 5: Data Type Examples > Type Tags [1.07ms]
(fail) Formal Specification Examples > Section 6: Collection Examples > List Syntax Variations [0.37ms]
(fail) Formal Specification Examples > Section 6: Collection Examples > Dictionary Syntax Variations [0.37ms]
(fail) Formal Specification Examples > Section 6: Collection Examples > Mapped Type Examples [0.90ms]
(fail) Formal Specification Examples > Section 7: Section Examples > Complete Agent with All Sections [1.75ms]
(fail) Formal Specification Examples > Section 8: Message Shortcut Examples (Lines 497-563) > All Message Shortcuts [2.36ms]
(fail) Formal Specification Examples > Complex Real-World Examples > E-commerce Support Agent [5.47ms]
(fail) RCL TextMate Grammar Scope Tests > Example File Scope Validation > example.rcl file matches expected scopes for mapped tokens [15.59ms]
(fail) RCL TextMate Grammar Scope Tests > Agent Section Scoping > agent declaration scopes correctly [0.26ms]
(fail) RCL TextMate Grammar Scope Tests > Agent Section Scoping > agent with config section scopes correctly [0.25ms]
(fail) RCL TextMate Grammar Scope Tests > Agent Section Scoping > properly separated subsections scope correctly [0.28ms]
(fail) RCL TextMate Grammar Scope Tests > Import Statement Scoping > import statement scopes correctly [0.19ms]
(fail) RCL TextMate Grammar Scope Tests > Flow Section Scoping > flow declarations and rules scope correctly [0.57ms]
(fail) RCL TextMate Grammar Scope Tests > Basic Import and Agent Pattern > import + simple agent scopes correctly [0.32ms]
(fail) RCL TextMate Grammar Scope Tests > Example.rcl Comprehensive Testing > import statements with spaces parse correctly [0.85ms]
(fail) RCL TextMate Grammar Scope Tests > Example.rcl Comprehensive Testing > agent section with spaces in name parses correctly [0.17ms]
(fail) RCL TextMate Grammar Scope Tests > Example.rcl Comprehensive Testing > atom values parse correctly [0.16ms]
(fail) RCL TextMate Grammar Scope Tests > Example.rcl Comprehensive Testing > embedded expressions parse correctly [0.14ms]
(fail) RCL TextMate Grammar Scope Tests > Example.rcl Comprehensive Testing > flow rules with atoms parse correctly [0.34ms]
(fail) RCL TextMate Grammar Scope Tests > Example.rcl Comprehensive Testing > agentMessage keyword recognition [0.30ms]
(fail) RCL TextMate Grammar Scope Tests > Example.rcl Comprehensive Testing > action keywords parse correctly [0.34ms]
(fail) RCL Hover Provider Tests > Error Handling in Hover > handles hover on invalid syntax gracefully [0.51ms]
(fail) RCL Hover Provider Tests > Error Handling in Hover > handles hover on missing references [0.42ms]
(fail) RCL Hover Provider Tests > Error Handling in Hover > handles hover at file boundaries [0.41ms]
(fail) RCL Completion Provider Tests > Section Keywords Completion > suggests agent keywords at file level [32.99ms]
(fail) RCL Completion Provider Tests > Section Keywords Completion > suggests subsection keywords within agent [1.16ms]
(fail) RCL Completion Provider Tests > Section Keywords Completion > suggests flow keywords within agent [0.62ms]
(fail) RCL Completion Provider Tests > Property Completion > suggests common agent properties [0.51ms]
(fail) RCL Completion Provider Tests > Property Completion > suggests config properties within config section [0.61ms]
(fail) RCL Completion Provider Tests > Property Completion > suggests message properties within messages [0.53ms]
(fail) RCL Completion Provider Tests > Value Completion > suggests boolean values [0.57ms]
(fail) RCL Completion Provider Tests > Value Completion > suggests atom values [0.91ms]
(fail) RCL Completion Provider Tests > Flow Completion > suggests flow rule targets [0.81ms]
(fail) RCL Completion Provider Tests > Flow Completion > suggests flow atoms [0.55ms]
(fail) RCL Completion Provider Tests > Import Completion > suggests namespace completion [0.71ms]
(fail) RCL Completion Provider Tests > Context-Aware Completion > completion is context-aware for different sections [0.51ms]
(fail) RCL Completion Provider Tests > Context-Aware Completion > completion works after colons [0.56ms]
(fail) RCL Completion Provider Tests > Error Recovery in Completion > provides completion even with syntax errors [0.42ms]
(fail) Formal Specification Compliance > RclFile Structure > should parse minimal agent definition according to specification [0.78ms]
(fail) Formal Specification Compliance > RclFile Structure > should parse imports before agent definition [0.22ms]
(fail) Formal Specification Compliance > Agent Definition Structure > should enforce required displayName [0.19ms]
(fail) Formal Specification Compliance > Agent Definition Structure > should allow optional brandName [0.22ms]
(fail) Formal Specification Compliance > Agent Definition Structure > should enforce at least one flow section [0.16ms]
(fail) Formal Specification Compliance > Agent Definition Structure > should enforce exactly one messages section [0.07ms]
(fail) Formal Specification Compliance > Message Shortcuts Implementation > should parse text shortcuts [0.19ms]
(fail) RCL Language Performance Tests > Parser Performance > parses large RCL files efficiently [61.56ms]
(fail) RCL Language Performance Tests > Parser Performance > processes many flow rules efficiently [2.71ms]
(fail) RCL Semantic Validation Tests > Agent Definition Validation > validates required agent properties [18.80ms]
(fail) RCL Semantic Validation Tests > Import Validation > validates circular import dependencies [0.34ms]
(fail) RCL Semantic Validation Tests > Configuration Validation > validates required config properties [0.43ms]
(fail) RCL Semantic Validation Tests > Cross-Section Validation > validates scope and visibility rules [0.62ms]
(fail) RCL Semantic Validation Tests > Type System Validation > validates string content and encoding [0.92ms]
(fail) RCL Semantic Validation Tests > Complex Validation Scenarios > validates complete agent with all sections [0.82ms]

 192 pass
 85 fail
 737 expect() calls
Ran 277 tests across 17 files. [1039.00ms]
