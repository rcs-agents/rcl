{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "rcl",
  "scopeName": "source.rcl",
  "fileTypes": [
    "rcl"
  ],
  "patterns": [
    {
      "include": "#import-statement"
    },
    {
      "include": "#agent-section"
    },
    {
      "include": "#agent-config-section"
    },
    {
      "include": "#agent-defaults-section"
    },
    {
      "include": "#flow-section"
    },
    {
      "include": "#messages-section"
    },
    {
      "include": "#message-definition"
    },
    {
      "include": "#message-shortcut"
    },
    {
      "include": "#section-name"
    },
    {
      "include": "#section-separator"
    },
    {
      "include": "#hash-comment"
    }
  ],
  "repository": {
    "agent-config-section": {
      "begin": "\\bagentConfig\\b",
      "end": "(?=^[a-z][a-zA-Z0-9_]*:)|(?=^import\\b)|(?=\\Z)",
      "name": "meta.rcl.section",
      "beginCaptures": {
        "0": {
          "name": "keyword.control.rcl.section"
        }
      },
      "patterns": [
        {
          "include": "#string-literal"
        },
        {
          "include": "#number-literal"
        },
        {
          "include": "#boolean-literal"
        },
        {
          "include": "#null-literal"
        },
        {
          "include": "#atom-literal"
        },
        {
          "include": "#attribute-key"
        },
        {
          "include": "#hash-comment"
        }
      ]
    },
    "agent-defaults-section": {
      "begin": "\\bagentDefaults\\b",
      "end": "(?=^[a-z][a-zA-Z0-9_]*:)|(?=^import\\b)|(?=\\Z)",
      "name": "meta.rcl.section",
      "beginCaptures": {
        "0": {
          "name": "keyword.control.rcl.section"
        }
      },
      "patterns": [
        {
          "include": "#string-literal"
        },
        {
          "include": "#number-literal"
        },
        {
          "include": "#boolean-literal"
        },
        {
          "include": "#null-literal"
        },
        {
          "include": "#atom-literal"
        },
        {
          "include": "#attribute-key"
        },
        {
          "include": "#hash-comment"
        }
      ]
    },
    "agent-section": {
      "begin": "\\bagent\\b",
      "end": "(?=^[a-z][a-zA-Z0-9_]*:)|(?=^import\\b)|(?=\\Z)",
      "name": "meta.rcl.section",
      "beginCaptures": {
        "0": {
          "name": "keyword.control.rcl.section"
        }
      },
      "patterns": [
        {
          "include": "#string-literal"
        },
        {
          "include": "#number-literal"
        },
        {
          "include": "#boolean-literal"
        },
        {
          "include": "#null-literal"
        },
        {
          "include": "#atom-literal"
        },
        {
          "include": "#attribute-key"
        },
        {
          "include": "#hash-comment"
        }
      ]
    },
    "atom-literal": {
      "match": ":([_a-zA-Z][\\w_]*|\"[^\"\\\\]*\")",
      "name": "constant.other.rcl"
    },
    "attribute-access": {
      "name": "meta.path.rcl",
      "begin": "\\.",
      "beginCaptures": {
        "0": {
          "name": "punctuation.accessor.rcl"
        }
      },
      "end": "(?=\\s|[,)\\]}])",
      "patterns": [
        {
          "include": "#space-separated-identifier"
        },
        {
          "include": "#attribute-key"
        },
        {
          "include": "#section-type"
        }
      ]
    },
    "attribute-key": {
      "match": "[a-z][a-zA-Z0-9_]*(?=\\s*:)",
      "name": "undefined"
    },
    "boolean-literal": {
      "match": "\\b(True|Yes|On|Enabled|Active|False|No|Off|Disabled|Inactive)\\b",
      "name": "constant.language.rcl"
    },
    "comma": {
      "name": "punctuation.separator.comma.rcl",
      "match": ","
    },
    "duration-literal": {
      "match": "(P((\\d+Y)|(\\d+M)|(\\d+W)|(\\d+D)|(T((\\d+H)|(\\d+M)|(\\d+(\\.\\d+)?S))+))+)|([0-9]+(\\.[0-9]+)?s)",
      "name": "constant.numeric.duration.rcl"
    },
    "embedded-javascript-multi-line": {
      "begin": "\\$((js|ts)?)>>>",
      "end": "(?=^(?![ \\t]))",
      "name": "meta.embedded.block.javascript.rcl",
      "patterns": [
        {
          "match": ".*",
          "name": "source.js"
        }
      ]
    },
    "embedded-javascript-single-line": {
      "match": "\\$((js|ts)?>)\\s*[^\\r\\n]*",
      "name": "meta.embedded.line.javascript.rcl"
    },
    "embedded-typescript-multi-line": {
      "begin": "\\$((js|ts)?)>>>",
      "end": "(?=^(?![ \\t]))",
      "name": "meta.embedded.block.typescript.rcl",
      "patterns": [
        {
          "match": ".*",
          "name": "source.ts"
        }
      ]
    },
    "embedded-typescript-single-line": {
      "match": "\\$((js|ts)?>)\\s*[^\\r\\n]*",
      "name": "meta.embedded.line.typescript.rcl"
    },
    "explicit-map": {
      "begin": "\\{",
      "end": "\\}",
      "name": "undefined",
      "beginCaptures": {
        "0": {}
      },
      "endCaptures": {
        "0": {}
      },
      "patterns": [
        {
          "include": "#duration-literal"
        },
        {
          "include": "#string-literal"
        },
        {
          "include": "#number-literal"
        },
        {
          "include": "#atom-literal"
        },
        {
          "include": "#true-literal"
        },
        {
          "include": "#false-literal"
        },
        {
          "include": "#null-literal"
        },
        {
          "include": "#boolean-literal"
        },
        {
          "include": "#space-separated-identifier"
        },
        {
          "include": "#attribute-key"
        },
        {
          "include": "#section-type"
        },
        {
          "include": "#mapped-type"
        },
        {
          "include": "#parentheses-list"
        },
        {
          "include": "#explicit-map"
        },
        {
          "include": "#inline-list"
        },
        {
          "include": "#indented-list"
        },
        {
          "include": "#indented-list-item"
        },
        {
          "include": "#comma"
        },
        {
          "include": "#hash-comment"
        }
      ]
    },
    "false-literal": {
      "name": "constant.language.rcl",
      "match": "\\b(False|No|Off|Disabled|Inactive)\\b"
    },
    "flow-arrow": {
      "match": "->",
      "name": "keyword.operator.rcl.arrow"
    },
    "flow-operand": {
      "match": "(:([_a-zA-Z][\\w_]*|\"[^\"\\\\]*\")|\"[^\"]*\"|[A-Z]([A-Za-z0-9-_]|(\\s(?=[A-Z0-9])))*)",
      "name": "entity.name.rcl.flow-target"
    },
    "flow-rule-name": {
      "match": "([A-Z]([A-Za-z0-9-_]|(\\s(?=[A-Z0-9])))*)\\s*:",
      "name": "entity.name.rcl.flow-rule"
    },
    "flow-section": {
      "begin": "\\bflow\\b",
      "end": "(?=^[a-z][a-zA-Z0-9_]*:)|(?=^import\\b)|(?=\\Z)",
      "name": "meta.rcl.section",
      "beginCaptures": {
        "0": {
          "name": "keyword.control.rcl.section"
        }
      },
      "patterns": [
        {
          "include": "#string-literal"
        },
        {
          "include": "#number-literal"
        },
        {
          "include": "#boolean-literal"
        },
        {
          "include": "#null-literal"
        },
        {
          "include": "#atom-literal"
        },
        {
          "include": "#attribute-key"
        },
        {
          "include": "#hash-comment"
        }
      ]
    },
    "flow-transition": {
      "begin": "(?=\\s*(:([_a-zA-Z][\\w_]*|\"[^\"\\\\]*\")|\"[^\"]*\"|[A-Z]([A-Za-z0-9-_]|(\\s(?=[A-Z0-9])))*)\\s*->)",
      "end": "(?=^(?![ \\t]))",
      "name": "meta.flow-transition.rcl",
      "patterns": [
        {
          "include": "#flow-arrow"
        },
        {
          "include": "#flow-operand"
        },
        {
          "include": "#with-clause"
        },
        {
          "include": "#when-clause"
        }
      ]
    },
    "grouped-expression": {
      "name": "meta.group.rcl",
      "begin": "\\(",
      "end": "\\)",
      "patterns": [
        {
          "include": "#operators"
        },
        {
          "include": "#attribute-access"
        },
        {
          "include": "#grouped-expression"
        },
        {
          "include": "#single-line-expression"
        },
        {
          "include": "#multi-line-expression"
        },
        {
          "include": "#type-tag-with-value"
        },
        {
          "include": "#duration-literal"
        },
        {
          "include": "#string-literal"
        },
        {
          "include": "#number-literal"
        },
        {
          "include": "#atom-literal"
        },
        {
          "include": "#true-literal"
        },
        {
          "include": "#false-literal"
        },
        {
          "include": "#null-literal"
        },
        {
          "include": "#boolean-literal"
        },
        {
          "include": "#duration-literal"
        },
        {
          "include": "#string-literal"
        },
        {
          "include": "#number-literal"
        },
        {
          "include": "#atom-literal"
        },
        {
          "include": "#true-literal"
        },
        {
          "include": "#false-literal"
        },
        {
          "include": "#null-literal"
        },
        {
          "include": "#boolean-literal"
        },
        {
          "include": "#space-separated-identifier"
        },
        {
          "include": "#attribute-key"
        },
        {
          "include": "#section-type"
        },
        {
          "include": "#hash-comment"
        },
        {
          "include": "#type-tag-with-value"
        }
      ]
    },
    "hash-comment": {
      "match": "#[^\\r\\n]*",
      "name": "comment.line.number-sign.rcl"
    },
    "import-statement": {
      "begin": "\\bimport\\b",
      "end": "$",
      "name": "meta.import.rcl",
      "beginCaptures": {
        "0": {}
      },
      "patterns": [
        {
          "include": "#namespace-path"
        },
        {
          "include": "#import-alias"
        },
        {
          "include": "#from-clause"
        }
      ]
    },
    "indented-list": {
      "patterns": [
        {
          "include": "#duration-literal"
        },
        {
          "include": "#string-literal"
        },
        {
          "include": "#number-literal"
        },
        {
          "include": "#atom-literal"
        },
        {
          "include": "#true-literal"
        },
        {
          "include": "#false-literal"
        },
        {
          "include": "#null-literal"
        },
        {
          "include": "#boolean-literal"
        },
        {
          "include": "#space-separated-identifier"
        },
        {
          "include": "#attribute-key"
        },
        {
          "include": "#section-type"
        },
        {
          "include": "#mapped-type"
        },
        {
          "include": "#parentheses-list"
        },
        {
          "include": "#explicit-map"
        },
        {
          "include": "#inline-list"
        },
        {
          "include": "#indented-list"
        },
        {
          "include": "#indented-list-item"
        },
        {
          "include": "#comma"
        },
        {
          "include": "#hash-comment"
        }
      ]
    },
    "indented-list-item": {
      "match": "(-)\\s*(.+)",
      "name": "meta.list.item.rcl"
    },
    "inline-list": {
      "begin": "\\[",
      "end": "\\]",
      "name": "meta.list.inline.rcl",
      "beginCaptures": {
        "0": {}
      },
      "endCaptures": {
        "0": {}
      },
      "patterns": [
        {
          "include": "#duration-literal"
        },
        {
          "include": "#string-literal"
        },
        {
          "include": "#number-literal"
        },
        {
          "include": "#atom-literal"
        },
        {
          "include": "#true-literal"
        },
        {
          "include": "#false-literal"
        },
        {
          "include": "#null-literal"
        },
        {
          "include": "#boolean-literal"
        },
        {
          "include": "#space-separated-identifier"
        },
        {
          "include": "#attribute-key"
        },
        {
          "include": "#section-type"
        },
        {
          "include": "#mapped-type"
        },
        {
          "include": "#parentheses-list"
        },
        {
          "include": "#explicit-map"
        },
        {
          "include": "#inline-list"
        },
        {
          "include": "#indented-list"
        },
        {
          "include": "#indented-list-item"
        },
        {
          "include": "#comma"
        },
        {
          "include": "#hash-comment"
        }
      ]
    },
    "mapped-type": {
      "begin": "([A-Z]([A-Za-z0-9-_]|(\\s(?=[A-Z0-9])))*)\\s+(list)\\s+(of)\\s*\\(",
      "end": "\\)(\\s*:)",
      "name": "meta.type.mapped.rcl",
      "beginCaptures": {
        "1": {},
        "4": {},
        "5": {}
      },
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.rcl.type-end"
        }
      },
      "patterns": [
        {
          "include": "#map-content"
        }
      ]
    },
    "message-definition": {
      "name": "meta.rcl.message.definition",
      "begin": "([A-Z]([A-Za-z0-9-_]|(\\s(?=[A-Z0-9])))*)\\s*(:)",
      "beginCaptures": {
        "1": {
          "name": "entity.name.rcl.message"
        },
        "3": {
          "name": "undefined"
        }
      },
      "end": "(?=^[A-Z])",
      "patterns": [
        {
          "include": "#agent-message-keyword"
        },
        {
          "include": "#content-message-keyword"
        },
        {
          "include": "#suggestion-keyword"
        },
        {
          "include": "#attribute-key"
        },
        {
          "include": "#string-literal"
        },
        {
          "include": "#embedded-code-line"
        }
      ]
    },
    "message-shortcut": {
      "name": "meta.rcl.message.shortcut",
      "match": "(\\b(?:text|richCard|carousel|rbmFile|file)\\b)\\s+(.+)",
      "captures": {
        "1": {
          "name": "keyword.control.rcl"
        },
        "2": {
          "name": "string.unquoted.rcl"
        }
      }
    },
    "messages-section": {
      "begin": "\\bmessages\\b",
      "end": "(?=^[a-z][a-zA-Z0-9_]*:)|(?=^import\\b)|(?=\\Z)",
      "name": "meta.rcl.section",
      "beginCaptures": {
        "0": {
          "name": "keyword.control.rcl.section"
        }
      },
      "patterns": [
        {
          "include": "#string-literal"
        },
        {
          "include": "#number-literal"
        },
        {
          "include": "#boolean-literal"
        },
        {
          "include": "#null-literal"
        },
        {
          "include": "#atom-literal"
        },
        {
          "include": "#attribute-key"
        },
        {
          "include": "#hash-comment"
        }
      ]
    },
    "multi-line-expression": {
      "name": "meta.interpolation.rcl",
      "begin": "\\$((js|ts)?)>>>",
      "beginCaptures": {
        "1": {
          "name": "punctuation.section.interpolation.begin.rcl"
        }
      },
      "end": "(?=^[ \\t]*(?:[^ \\t\\n\\r]|$))",
      "endCaptures": {
        "1": {
          "name": "punctuation.section.interpolation.end.rcl"
        }
      },
      "patterns": [
        {
          "include": "#duration-literal"
        },
        {
          "include": "#string-literal"
        },
        {
          "include": "#number-literal"
        },
        {
          "include": "#atom-literal"
        },
        {
          "include": "#true-literal"
        },
        {
          "include": "#false-literal"
        },
        {
          "include": "#null-literal"
        },
        {
          "include": "#boolean-literal"
        }
      ]
    },
    "multiline-string-clean": {
      "begin": "\\|(?=\\s*(?:\\r?\\n|$))",
      "end": "(?=^(?![ \\t]))",
      "name": "string.unquoted.rcl",
      "patterns": [
        {
          "match": ".*",
          "name": "string.unquoted.rcl"
        }
      ]
    },
    "multiline-string-preserve": {
      "begin": "\\+\\|(?=\\s*(?:\\r?\\n|$))",
      "end": "(?=^(?![ \\t]))",
      "name": "string.unquoted.rcl",
      "patterns": [
        {
          "match": ".*",
          "name": "string.unquoted.rcl"
        }
      ]
    },
    "multiline-string-preserve-all": {
      "begin": "\\+\\|\\+(?=\\s*(?:\\r?\\n|$))",
      "end": "(?=^(?![ \\t]))",
      "name": "string.unquoted.rcl",
      "patterns": [
        {
          "match": ".*",
          "name": "string.unquoted.rcl"
        }
      ]
    },
    "multiline-string-trim": {
      "begin": "\\|-(?=\\s*(?:\\r?\\n|$))",
      "end": "(?=^(?![ \\t]))",
      "name": "string.unquoted.rcl",
      "patterns": [
        {
          "match": ".*",
          "name": "string.unquoted.rcl"
        }
      ]
    },
    "null-literal": {
      "match": "\\b(Null|None|Void|null)\\b",
      "name": "constant.language.rcl"
    },
    "number-literal": {
      "match": "[0-9]+(\\.[0-9]+)?([eE][-+]?[0-9]+)?",
      "name": "constant.numeric.rcl"
    },
    "operators": {
      "name": "keyword.operator.rcl",
      "match": "(-|->|\\+|\\*|\\/|%|==|!=|<=|>=|<|>|and|or|not|is)"
    },
    "parentheses-list": {
      "begin": "\\(",
      "end": "\\)",
      "name": "meta.list.parentheses.rcl",
      "beginCaptures": {
        "0": {}
      },
      "endCaptures": {
        "0": {}
      },
      "patterns": [
        {
          "include": "#list-content"
        }
      ]
    },
    "quoted-string": {
      "match": "\"(\\\\.|[^\"\\\\])*\"",
      "name": "string.quoted.double.rcl"
    },
    "section-name": {
      "name": "entity.name.section.rcl",
      "match": "[A-Z]([A-Za-z0-9-_]|(\\s(?=[A-Z0-9])))*"
    },
    "section-separator": {
      "name": "undefined",
      "match": ":"
    },
    "section-type": {
      "match": "[a-z][a-zA-Z0-9_]*\\b",
      "name": "keyword.control.rcl.section"
    },
    "single-line-expression": {
      "name": "meta.interpolation.rcl",
      "begin": "\\$((js|ts)?>)",
      "beginCaptures": {
        "1": {
          "name": "punctuation.section.interpolation.begin.rcl"
        }
      },
      "end": "(?=\\r?\\n)",
      "endCaptures": {
        "1": {
          "name": "punctuation.section.interpolation.end.rcl"
        }
      },
      "patterns": [
        {
          "include": "#duration-literal"
        },
        {
          "include": "#string-literal"
        },
        {
          "include": "#number-literal"
        },
        {
          "include": "#atom-literal"
        },
        {
          "include": "#true-literal"
        },
        {
          "include": "#false-literal"
        },
        {
          "include": "#null-literal"
        },
        {
          "include": "#boolean-literal"
        }
      ]
    },
    "space-separated-identifier": {
      "match": "[A-Z]([A-Za-z0-9-_]|(\\s(?=[A-Z0-9])))*",
      "name": "entity.name.rcl.identifier"
    },
    "string-literal": {
      "match": "\"(\\\\.|[^\"\\\\])*\"",
      "name": "string.quoted.double.rcl"
    },
    "true-literal": {
      "name": "constant.language.rcl",
      "match": "\\b(True|Yes|On|Enabled|Active)\\b"
    },
    "type-tag-with-value": {
      "begin": "<",
      "end": ">",
      "name": "meta.type-tag.rcl",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.rcl.tag-begin"
        }
      },
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.rcl.tag-end"
        }
      },
      "patterns": [
        {
          "include": "#type-name"
        },
        {
          "include": "#type-value"
        },
        {
          "include": "#type-modifier"
        }
      ]
    },
    "when-clause": {
      "begin": "\\bwhen\\b",
      "end": "(?=^(?![ \\t]))",
      "name": "meta.when-clause.rcl",
      "beginCaptures": {
        "0": {
          "name": "keyword.control.rcl.flow"
        }
      },
      "patterns": [
        {
          "include": "#flow-condition"
        },
        {
          "include": "#flow-transition"
        }
      ]
    },
    "with-clause": {
      "begin": "\\bwith\\b",
      "end": "(?=^(?![ \\t]))",
      "name": "meta.with-clause.rcl",
      "beginCaptures": {
        "0": {
          "name": "keyword.control.rcl.flow"
        }
      },
      "patterns": [
        {
          "include": "#flow-parameter"
        },
        {
          "include": "#attribute-key"
        }
      ]
    }
  }
}