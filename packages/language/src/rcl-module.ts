import { type Module, inject, IndentationAwareLexer } from 'langium';
import { createDefaultModule, createDefaultSharedModule, type DefaultSharedModuleContext, type LangiumServices, type LangiumSharedServices, type PartialLangiumServices } from 'langium/lsp';
import { RclGeneratedModule, RclGeneratedSharedModule } from './generated/module.js';
import { RclValidator, registerValidationChecks } from './rcl-validator.js';
import { RclCompletionProvider } from './rcl-completion-provider.js';
import { RclCustomTokenBuilder } from './services/rcl-custom-token-builder.js';
import { RclSemanticTokenProvider } from './lsp/rcl-semantic-token-provider.js';
import { RclHoverProvider } from './lsp/rcl-hover-provider.js';
import { RclReferenceProvider } from './lsp/rcl-reference-provider.js';
import { SectionTypeRegistry } from './services/section-registry.js';

/**
 * Declaration of custom services - add your own service classes here.
 */
export type RclAddedServices = {
  validation: {
    RclValidator: RclValidator
  },
  lsp: {
    CompletionProvider: RclCompletionProvider,
    SemanticTokenProvider: RclSemanticTokenProvider,
    HoverProvider: RclHoverProvider,
    ReferenceProvider: RclReferenceProvider
  },
  meta: {
    SectionTypeRegistry: SectionTypeRegistry
  }
}

/**
 * Union of Langium default services and your custom services - use this as constructor parameter
 * of custom service classes.
 */
export type RclServices = LangiumServices & RclAddedServices

/**
 * Dependency injection module that overrides Langium default services and contributes the
 * declared custom services. The Langium defaults can be partially specified to override only
 * selected services, while the custom services must be fully specified.
 */
export const RclModule: Module<RclServices, PartialLangiumServices & RclAddedServices> = {
  parser: {
    TokenBuilder: () => new RclCustomTokenBuilder(),
    Lexer: (services) => new IndentationAwareLexer(services),
  },
  validation: {
    RclValidator: () => new RclValidator()
  },
  lsp: {
    CompletionProvider: (services) => new RclCompletionProvider(services),
    SemanticTokenProvider: (services) => new RclSemanticTokenProvider(services),
    HoverProvider: (services) => new RclHoverProvider(services),
    ReferenceProvider: (services) => new RclReferenceProvider(services)
  },
  meta: {
    SectionTypeRegistry: () => new SectionTypeRegistry()
  }
};

/**
 * Create the full set of services required by Langium.
 *
 * First inject the shared services by merging two modules:
 *  - Langium default shared services
 *  - Services generated by langium-cli
 *
 * Then inject the language-specific services by merging three modules:
 *  - Langium default language-specific services
 *  - Services generated by langium-cli
 *  - Services specified in this file
 *
 * @param context Optional module context with the LSP connection
 * @returns An object wrapping the shared services and the language-specific services
 */
export function createRclServices(context: DefaultSharedModuleContext): {
  shared: LangiumSharedServices,
  Rcl: RclServices
} {
  const shared = inject(
    createDefaultSharedModule(context),
    RclGeneratedSharedModule
  );
  const Rcl = inject(
    createDefaultModule({ shared }),
    RclGeneratedModule,
    RclModule
  );
  shared.ServiceRegistry.register(Rcl);
  registerValidationChecks(Rcl);
  if (!context.connection) {
    // We don't run inside a language server
    // Therefore, initialize the configuration provider instantly
    shared.workspace.ConfigurationProvider.initialized({});
  }
  return { shared, Rcl };
}
