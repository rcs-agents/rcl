import { type Module, inject } from 'langium';
import { createDefaultModule, createDefaultSharedModule, type DefaultSharedModuleContext, type LangiumServices, type LangiumSharedServices, type PartialLangiumServices } from 'langium/lsp';
import { RclCompletionProvider } from './rcl-completion-provider.js';
import { RclSemanticTokenProvider } from './lsp/rcl-semantic-token-provider.js';
import { RclHoverProvider } from './lsp/rcl-hover-provider.js';
import { RclDocumentSymbolProvider } from './lsp/rcl-document-symbol-provider.js';
import { RclFoldingRangeProvider } from './lsp/rcl-folding-range-provider.js';
import { RclDefinitionProvider } from './lsp/rcl-definition-provider.js';
import { RclFormatter } from './lsp/rcl-formatter.js';
import { RclTokenBuilder } from './parser/lexer/token-builder.js';
// Using custom lexer/parser instead of Langium grammar-based approach

/**
 * Declaration of custom services - add your own service classes here.
 */
export type RclAddedServices = {
  lsp: {
    CompletionProvider: RclCompletionProvider,
    SemanticTokenProvider: RclSemanticTokenProvider,
    HoverProvider: RclHoverProvider,
    DefinitionProvider: RclDefinitionProvider,
    DocumentSymbolProvider: RclDocumentSymbolProvider,
    FoldingRangeProvider: RclFoldingRangeProvider,
    Formatter: RclFormatter
  },
  parser: {
    TokenBuilder: () => RclTokenBuilder
  }
}

/**
 * Union of Langium default services and your custom services - use this as constructor parameter
 * of custom service classes.
 */
export type RclServices = LangiumServices & RclAddedServices

/**
 * Test grammar services type - same as RclServices but for the test grammar
 */
export type RclTestServices = LangiumServices & RclAddedServices

/**
 * Dependency injection module that overrides Langium default services and contributes the
 * declared custom services. The Langium defaults can be partially specified to override only
 * selected services, while the custom services must be fully specified.
 */
export const RclModule: Module<RclServices, PartialLangiumServices> = {
  lsp: {
    CompletionProvider: (services: RclServices) => new RclCompletionProvider(services),
    SemanticTokenProvider: (services: RclServices) => new RclSemanticTokenProvider(services),
    HoverProvider: (services: RclServices) => new RclHoverProvider(services),
    DefinitionProvider: (services: RclServices) => new RclDefinitionProvider(services),
    DocumentSymbolProvider: (services: RclServices) => new RclDocumentSymbolProvider(services),
    FoldingRangeProvider: (services: RclServices) => new RclFoldingRangeProvider(services),
    Formatter: () => new RclFormatter()
  },
  parser: {    
    TokenBuilder: (services: RclServices) => new RclTokenBuilder()
  }
};

/**
 * Create the full set of services required by Langium.
 *
 * First inject the shared services by merging two modules:
 *  - Langium default shared services
 *  - Services generated by langium-cli
 *
 * Then inject the language-specific services by merging three modules:
 *  - Langium default language-specific services
 *  - Services generated by langium-cli
 *  - Services specified in this file
 *
 * @param context Optional module context with the LSP connection
 * @returns An object wrapping the shared services and the language-specific services
 */
export function createRclServices(context: DefaultSharedModuleContext): {
  shared: LangiumSharedServices,
  Rcl: RclServices
} {
  const shared = inject(
    createDefaultSharedModule(context)
  );
  const Rcl = inject(
    createDefaultModule({ shared }),
    RclModule
  ) as RclServices;
  shared.ServiceRegistry.register(Rcl);
  if (!context.connection) {
    // We don't run inside a language server
    // Therefore, initialize the configuration provider instantly
    shared.workspace.ConfigurationProvider.initialized({});
  }
  return { shared, Rcl };
}

/**
 * Create the full set of services required by Langium for the test grammar.
 * This uses the same service configuration as the main grammar but with the test grammar module.
 *
 * @param context Optional module context with the LSP connection
 * @returns An object wrapping the shared services and the test language-specific services
 */
export function createRclTestServices(context: DefaultSharedModuleContext): {
  shared: LangiumSharedServices,
  RclTest: RclTestServices
} {
  const shared = inject(
    createDefaultSharedModule(context)
    // Removed RclGeneratedSharedModule - using custom parser approach
  );
  const RclTest = inject(
    createDefaultModule({ shared }),
    // Removed RclTestLanguageGeneratedModule - using custom parser approach
    RclModule
  ) as RclTestServices;
  shared.ServiceRegistry.register(RclTest);
  if (!context.connection) {
    // We don't run inside a language server
    // Therefore, initialize the configuration provider instantly
    shared.workspace.ConfigurationProvider.initialized({});
  }
  return { shared, RclTest };
}
