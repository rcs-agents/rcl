/*
 * ========================================================================
 * ðŸš¨ WARNING: THIS FILE IS AUTOMATICALLY GENERATED - DO NOT EDIT! ðŸš¨
 * ========================================================================
 * 
 * This file is generated by the bundle-grammar.ts script from the modular
 * grammar files in the src/grammar/ directory.
 * 
 * To make changes:
 * 1. Edit the source .langium files in packages/language/src/grammar/
 * 2. Run: bun run build:lang
 * 3. The script will regenerate this bundled file automatically
 * 
 * Any direct edits to this file WILL BE LOST on the next build!
 * 
 * Generated at: 2025-06-30T18:46:45.439Z
 * ========================================================================
 */

grammar RclLanguage

interface AbstractNamedSection {
    type?: string;
    name: string;
    sectionType?: string;
    attributes: Attribute[];
    agentAttributes: AgentAttribute[];
    subSections: Section[];
    flowContent: FlowContent[];
    emptyLines: string[];
}

interface Section extends AbstractNamedSection {
    configProperties: ConfigProperty[];
    defaultProperties: DefaultProperty[];
}

interface Attribute {
    key: string;
    value: SimpleValue;
}

interface AgentAttribute {
    key: string;
    value: SimpleValue;
}

interface SimpleValue {
    value?: string;
}

interface ParenthesesList extends SimpleValue {
    items: SimpleValue[];
}

interface InlineList extends SimpleValue {
    items: SimpleValue[];
}

interface IndentedList extends SimpleValue {
    items: SimpleValue[];
    emptyLines: string[];
}

interface BraceObject extends SimpleValue {
    pairs: ObjectPair[];
}

interface IndentedObject extends SimpleValue {
    pairs: ObjectPair[];
    emptyLines: string[];
}

interface ObjectPair {
    key: SimpleValue;
    value: SimpleValue;
}

interface AgentMessage {
    identifier?: string;
    attributes: MessageAttribute[];
    emptyLines: string[];
}

interface ContentMessage {
    attributes: MessageAttribute[];
    emptyLines: string[];
}

interface ComposeTextMessage {
    attributes: MessageAttribute[];
    emptyLines: string[];
}

interface ComposeRecordingMessage {
    attributes: MessageAttribute[];
    emptyLines: string[];
}

interface CardContent {
    attributes: MessageAttribute[];
    emptyLines: string[];
}

interface ContentInfo {
    attributes: MessageAttribute[];
    emptyLines: string[];
}

interface Media {
    attributes: MessageAttribute[];
    emptyLines: string[];
}

interface MessageAttribute {
    key: string;
    value: SimpleValue;
}

interface RichCard {
    cardType: StandaloneCard | CarouselCard;
}

interface StandaloneCard {
    attributes: CardAttribute[];
    suggestions: CardSuggestion[];
    emptyLines: string[];
}

interface CarouselCard {
    cards: StandaloneCard[];
    attributes: CardAttribute[];
    emptyLines: string[];
}

interface CardSuggestion {
    attributes: CardAttribute[];
    emptyLines: string[];
}

interface CardAttribute {
    key?: string;
    value: SimpleValue;
}

interface Suggestion {
    replyType?: SuggestedReply;
    actionType?: SuggestedAction;
}

interface SuggestedReply {
    attributes: SuggestionAttribute[];
    emptyLines: string[];
}

interface SuggestedAction {
    attributes: SuggestionAttribute[];
    actions: ActionType[];
    emptyLines: string[];
}

interface ActionType {
}

interface DialAction extends ActionType {
    attributes: SuggestionAttribute[];
    emptyLines: string[];
}

interface OpenUrlAction extends ActionType {
    attributes: SuggestionAttribute[];
    emptyLines: string[];
}

interface ShareLocationAction extends ActionType {
    attributes: SuggestionAttribute[];
    emptyLines: string[];
}

interface ViewLocationAction extends ActionType {
    attributes: SuggestionAttribute[];
    emptyLines: string[];
}

interface SaveEventAction extends ActionType {
    attributes: SuggestionAttribute[];
    emptyLines: string[];
}

interface CreateCalendarEventAction extends ActionType {
    attributes: SuggestionAttribute[];
    emptyLines: string[];
}

interface SuggestionAttribute {
    key: string;
    value: SimpleValue;
}

interface TextShortcut {
    value: SimpleValue;
}

interface RichCardShortcut {
    value: SimpleValue;
    attributes: ShortcutAttribute[];
    emptyLines: string[];
}

interface ReplyShortcut {
    value: SimpleValue;
    attributes: ShortcutAttribute[];
    emptyLines: string[];
}

interface SuggestionShortcut {
    value: SimpleValue;
    attributes: ShortcutAttribute[];
    emptyLines: string[];
}

interface MessageShortcut {
    value: SimpleValue;
    attributes: ShortcutAttribute[];
    emptyLines: string[];
}

interface FileShortcut {
    attributes: ShortcutAttribute[];
    emptyLines: string[];
}

interface RbmFileShortcut {
    attributes: ShortcutAttribute[];
    emptyLines: string[];
}

interface ShortcutAttribute {
    key?: string;
    value: SimpleValue;
}

interface ConfigProperty {
    key?: string;
    value?: SimpleValue;
}

interface DescriptionProperty extends ConfigProperty {}
interface LogoUriProperty extends ConfigProperty {}
interface HeroUriProperty extends ConfigProperty {}
interface ColorProperty extends ConfigProperty {}
interface AgentUseCaseProperty extends ConfigProperty {}
interface HostingRegionProperty extends ConfigProperty {}

interface PhoneNumberProperty extends ConfigProperty {
    attributes: ConfigPropertyAttribute[];
    emptyLines: string[];
}

interface EmailProperty extends ConfigProperty {
    attributes: ConfigPropertyAttribute[];
    emptyLines: string[];
}

interface WebsiteProperty extends ConfigProperty {
    attributes: ConfigPropertyAttribute[];
    emptyLines: string[];
}

interface PrivacyProperty extends ConfigProperty {
    attributes: ConfigPropertyAttribute[];
    emptyLines: string[];
}

interface TermsConditionsProperty extends ConfigProperty {
    attributes: ConfigPropertyAttribute[];
    emptyLines: string[];
}

interface BillingConfigProperty extends ConfigProperty {
    attributes: ConfigPropertyAttribute[];
    emptyLines: string[];
}

interface ConfigPropertyAttribute {
    key?: string;
    value: SimpleValue;
}

interface DefaultProperty {
    key?: string;
    value?: SimpleValue;
}

interface FallbackMessageProperty extends DefaultProperty {}
interface MessageTrafficTypeProperty extends DefaultProperty {}
interface TtlProperty extends DefaultProperty {}
interface PostbackDataProperty extends DefaultProperty {}

interface ExpressionsProperty extends DefaultProperty {
    attributes: DefaultPropertyAttribute[];
    emptyLines: string[];
}

interface DefaultPropertyAttribute {
    key?: string;
    value: SimpleValue;
}

interface Ref {
    refTarget: AbstractNamedSection;
}

interface TypeConversion {
    target: string;
    value: SimpleValue;
}

interface Parameter {
    name: string;
    type: string;
    value: SimpleValue;
}

interface ImportStatement {
    source: string[];
    alias?: string;
}

interface FlowContent {
    rules: FlowRule[];
}

interface EmbeddedCodeExpression {
    content: string;
}

interface EmbeddedCodeBlock {
    content: string[];
}

interface FlowRule {
    source: string;
    destination?: @AbstractNamedSection;
    destinationIsFlow?: boolean;
    withClause?: WithClause;
    code?: EmbeddedCodeExpression | EmbeddedCodeBlock;
    rules?: FlowRule[];
}

interface WithClause {
    parameters: Parameter[];
}

interface FileAttribute {
    key: string;
    value: SimpleValue;
}

interface MultiLineString {
    marker: string;
    has_block_content?: string;
}

hidden terminal SL_COMMENT: /#[^\r\n]*/;
terminal WS: /[ \t]+/;

terminal __: /[ ]+/;

terminal ATOM: /:([_a-zA-Z][\w_]*|\"[^\"\\]*\")/;
terminal STRING: /\"(\\.|[^\"\\])*\"/;
terminal NUMBER: /[0-9]{1,3}(,[0-9]{3})*(\.[0-9]+)?([eE][-+]?[0-9]+)?|[0-9]+(\.[0-9]+)?([eE][-+]?[0-9]+)?/;
terminal NL: /[\r\n]+/;

terminal INDENT: 'synthetic:indent';
terminal DEDENT: 'synthetic:dedent';

terminal TRUE_KW: /\b(True|On|Yes|Active|Enabled)\b/;
terminal FALSE_KW: /\b(False|Off|No|Inactive|Disabled)\b/;
terminal NULL_KW: /\b(Null|None|Void)\b/;

terminal PROPER_NOUN: /[A-Z0-9][a-zA-Z0-9-]*(?:\s+[A-Z0-9][a-zA-Z0-9-]*)*/;

terminal COMMON_NOUN: /(?!import\b|as\b|agent\b|agentConfig\b|agentDefaults\b|flow\b|messages\b|authentication\b|transaction\b|promotion\b|servicerequest\b|acknowledge\b|message\b|or\b|and\b|is\b|not\b|date\b|datetime\b|time\b|email\b|phone\b|msisdn\b|url\b|zipcode\b|zip\b|True\b|On\b|Yes\b|Active\b|Enabled\b|False\b|Off\b|No\b|Inactive\b|Disabled\b|Null\b|None\b|Void\b|list\b|of\b|with\b|start\b|text\b|reply\b|dial\b|openUrl\b|shareLocation\b|viewLocation\b|saveEvent\b|richCard\b|carousel\b|rbmFile\b|file\b|displayName\b|brandName\b|Config\b|Defaults\b|Messages\b|agentMessage\b|contentMessage\b|composeTextMessage\b|composeRecordingMessage\b|cardContent\b|contentInfo\b|media\b|standaloneCard\b|carouselCard\b|cardSuggestion\b|title\b|description\b|thumbnail\b|height\b|orientation\b|suggestion\b|suggestedReply\b|suggestedAction\b|action\b|createCalendarEvent\b|replyShortcut\b|suggestionShortcut\b|messageShortcut\b|filename\b|thumbnailUrl\b|fileUrl\b|logoUri\b|heroUri\b|color\b|agentUseCase\b|hostingRegion\b|phoneNumberEntry\b|emailEntry\b|websiteEntry\b|privacy\b|termsConditions\b|billingConfig\b|billingCategory\b|number\b|address\b|url\b|label\b|fallback_message\b|messageTrafficType\b|ttl\b|postbackData\b|expressions\b|language\b)[a-z][a-zA-Z0-9_]*/;

BooleanLiteral returns string: TRUE_KW | FALSE_KW;

NullLiteral returns string:
    NULL_KW;

EmptyLine returns string: __* NL;

terminal MULTILINE_STR_CLEAN: /\|(?=\s*#|\s*[\r\n])/;            // |
terminal MULTILINE_STR_TRIM: /\|-(?=\s*#|\s*[\r\n])/;            // |-
terminal MULTILINE_STR_PRESERVE: /\+\|(?=\s*#|\s*[\r\n])/;       // +|
terminal MULTILINE_STR_PRESERVE_ALL: /\+\|\+(?=\s*#|\s*[\r\n])/; // +|+

MultiLineString returns MultiLineString:
    marker=(MULTILINE_STR_CLEAN | MULTILINE_STR_TRIM | MULTILINE_STR_PRESERVE | MULTILINE_STR_PRESERVE_ALL)
    has_block_content='true';

ImportStatement returns ImportStatement:
    'import' source+=PROPER_NOUN ( __? '/' __? source+=PROPER_NOUN)* ('as' alias=PROPER_NOUN)?;

terminal TYPE_TAG_NAME: /(date|datetime|dt|time|t|email|phone|msisdn|url|zipcode|zip|duration|ttl)/;
terminal ISO_DURATION_LITERAL: /P(\d+[YMWD])*T?(\d+[HMS])*|(\d+(\.\d+)?s)/;

TypeTagValue returns string: STRING | NUMBER | TRUE_KW | FALSE_KW | NULL_KW | ATOM | PROPER_NOUN | COMMON_NOUN | ISO_DURATION_LITERAL;

interface TypeTag {
    type: string;
    value: string;
    modifier?: string;
}

TypeTag returns TypeTag:
    '<' type=TYPE_TAG_NAME __ value=TypeTagValue (__? '|' __? modifier=STRING)? __?'>'; 

terminal EMBEDDED_CODE_START: /\$((js|ts)?)/;
terminal CODE_LINE: /(?:>\s)\s*[^\r\n]*/;
terminal CODE_BLOCK_START: />>>[\s\r\n]+/;

EmbeddedCodeBlock returns EmbeddedCodeBlock:
    CODE_BLOCK_START 
    INDENT
    content+=(CODE_LINE | EmptyLine)*
    DEDENT;

EmbeddedCodeExpression returns EmbeddedCodeExpression:
    EMBEDDED_CODE_START content=CODE_LINE;

SimpleValue returns SimpleValue:
    value=STRING | value=NUMBER | value=ATOM | value=BooleanLiteral | value=NullLiteral | value=PROPER_NOUN | value=COMMON_NOUN 
    | TypeTag 
    | EmbeddedCodeExpression 
    | MultiLineString
    | ParenthesesList
    | InlineList 
    | IndentedList
    | BraceObject
    | IndentedObject;

ParenthesesList returns ParenthesesList:
    '(' (items+=SimpleValue (',' items+=SimpleValue)*)? ')';

InlineList returns InlineList:
    '-' items+=SimpleValue;

IndentedList returns IndentedList:
    NL?
    INDENT
    (
        '-' items+=SimpleValue (NL | WS)?
        | emptyLines+=EmptyLine
    )*
    DEDENT;

BraceObject returns BraceObject:
    '{' (pairs+=ObjectPair (',' pairs+=ObjectPair)*)? '}';

IndentedObject returns IndentedObject:
    NL?
    INDENT
    (
        pairs+=ObjectPair (NL | WS)?
        | emptyLines+=EmptyLine
    )*
    DEDENT;

ObjectPair returns ObjectPair:
    key=SimpleValue ':' (__? | WS | NL)? value=SimpleValue;

Parameter returns Parameter:
    name=COMMON_NOUN ':' type=COMMON_NOUN value=SimpleValue; 

FlowContent returns FlowContent:
    rules+=FlowRule+;

FlowRule returns FlowRule:
    source=(ATOM | PROPER_NOUN | STRING) '->' (
      destinationIsFlow?='start' destination=[AbstractNamedSection:PROPER_NOUN] (withClause=WithClause)?
      | code=(EmbeddedCodeExpression | EmbeddedCodeBlock)
      | rules+=FlowRule
    );

WithClause returns WithClause:
    'with' parameters+=Parameter (',' parameters+=Parameter)*;

ConfigProperty returns ConfigProperty:
    DescriptionProperty
    | LogoUriProperty  
    | HeroUriProperty
    | ColorProperty
    | AgentUseCaseProperty
    | HostingRegionProperty
    | PhoneNumberProperty
    | EmailProperty
    | WebsiteProperty  
    | PrivacyProperty
    | TermsConditionsProperty
    | BillingConfigProperty;

DescriptionProperty returns DescriptionProperty:
    {DescriptionProperty} key='description' ':' (__? | WS | NL)? value=SimpleValue;

LogoUriProperty returns LogoUriProperty:
    {LogoUriProperty} key='logoUri' ':' (__? | WS | NL)? value=SimpleValue;

HeroUriProperty returns HeroUriProperty:
    {HeroUriProperty} key='heroUri' ':' (__? | WS | NL)? value=SimpleValue;

ColorProperty returns ColorProperty:
    {ColorProperty} key='color' ':' (__? | WS | NL)? value=SimpleValue;

AgentUseCaseProperty returns AgentUseCaseProperty:
    {AgentUseCaseProperty} key='agentUseCase' ':' (__? | WS | NL)? value=SimpleValue;

HostingRegionProperty returns HostingRegionProperty:
    {HostingRegionProperty} key='hostingRegion' ':' (__? | WS | NL)? value=SimpleValue;

PhoneNumberProperty returns PhoneNumberProperty:
    {PhoneNumberProperty} key='phoneNumberEntry'
    NL?
    INDENT
    (attributes+=ConfigPropertyAttribute | emptyLines+=EmptyLine)*
    DEDENT;

EmailProperty returns EmailProperty:
    {EmailProperty} key='emailEntry'
    NL?
    INDENT
    (attributes+=ConfigPropertyAttribute | emptyLines+=EmptyLine)*
    DEDENT;

WebsiteProperty returns WebsiteProperty:
    {WebsiteProperty} key='websiteEntry'
    NL?
    INDENT
    (attributes+=ConfigPropertyAttribute | emptyLines+=EmptyLine)*
    DEDENT;

PrivacyProperty returns PrivacyProperty:
    {PrivacyProperty} key='privacy'
    NL?
    INDENT
    (attributes+=ConfigPropertyAttribute | emptyLines+=EmptyLine)*
    DEDENT;

TermsConditionsProperty returns TermsConditionsProperty:
    {TermsConditionsProperty} key='termsConditions'
    NL?
    INDENT
    (attributes+=ConfigPropertyAttribute | emptyLines+=EmptyLine)*
    DEDENT;

BillingConfigProperty returns BillingConfigProperty:
    {BillingConfigProperty} key='billingConfig'
    NL?
    INDENT
    (attributes+=ConfigPropertyAttribute | emptyLines+=EmptyLine)*
    DEDENT;

ConfigPropertyAttribute returns ConfigPropertyAttribute:
    {ConfigPropertyAttribute} key=('number' | 'address' | 'url' | 'label' | 'billingCategory') ':' __ value=SimpleValue;

DefaultProperty returns DefaultProperty:
    FallbackMessageProperty
    | MessageTrafficTypeProperty
    | TtlProperty
    | PostbackDataProperty
    | ExpressionsProperty;

FallbackMessageProperty returns FallbackMessageProperty:
    {FallbackMessageProperty} key='fallback_message' ':' __ value=SimpleValue;

MessageTrafficTypeProperty returns MessageTrafficTypeProperty:
    {MessageTrafficTypeProperty} key='messageTrafficType' ':' __ value=SimpleValue;

TtlProperty returns TtlProperty:
    {TtlProperty} key='ttl' ':' __ value=SimpleValue;

PostbackDataProperty returns PostbackDataProperty:
    {PostbackDataProperty} key='postbackData' ':' __ value=SimpleValue;

ExpressionsProperty returns ExpressionsProperty:
    {ExpressionsProperty} key='expressions'
    NL?
    INDENT
    (attributes+=DefaultPropertyAttribute | emptyLines+=EmptyLine)*
    DEDENT;

DefaultPropertyAttribute returns DefaultPropertyAttribute:
    {DefaultPropertyAttribute} key='language' ':' __ value=SimpleValue; 

SectionType returns string:
  'agent'
  | 'agentConfig'
  | 'agentDefaults'
  | 'flow'
  | 'messages'
  | ((
      'authentication'
      | 'transaction'
      | 'promotion'
      | 'servicerequest'
      | 'acknowledge'
    ) __ 'message');

Section returns Section:
    (type=SectionType)? name=PROPER_NOUN
    NL?
    INDENT
    (
        attributes+=Attribute 
        | agentAttributes+=AgentAttribute
        | configProperties+=ConfigProperty
        | defaultProperties+=DefaultProperty
        | subSections+=Section
        | flowContent+=FlowContent 
        | emptyLines+=EmptyLine
    )*
    DEDENT;

Attribute returns Attribute:
    key=COMMON_NOUN ':' (__? | WS | NL)? value=SimpleValue;

AgentAttribute returns AgentAttribute:
    key=('displayName' | 'brandName') ':' __? value=SimpleValue
    | key=COMMON_NOUN ':' __? value=SimpleValue;

entry RclFile:
    (imports+=ImportStatement | emptyLines+=EmptyLine)*
    agentSection=Section;

