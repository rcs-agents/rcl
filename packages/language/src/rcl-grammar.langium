/*
 * ========================================================================
 * ðŸš¨ WARNING: THIS FILE IS AUTOMATICALLY GENERATED - DO NOT EDIT! ðŸš¨
 * ========================================================================
 * 
 * This file is generated by the bundle-grammar.ts script from the modular
 * grammar files in the src/grammar/ directory.
 * 
 * To make changes:
 * 1. Edit the source .langium files in packages/language/src/grammar/
 * 2. Run: bun run build:lang
 * 3. The script will regenerate this bundled file automatically
 * 
 * Any direct edits to this file WILL BE LOST on the next build!
 * 
 * Generated at: 2025-07-04T15:31:12.708Z
 * ========================================================================
 */

grammar RclLanguage

interface AbstractNamedSection {
    type?: string;
    name: string;
    sectionType?: string;
    attributes: Attribute[];
    agentAttributes: AgentAttribute[];
    subSections: Section[];
    flowContent: FlowContent[];
    emptyLines: string[];
}

interface Section extends AbstractNamedSection {
    sectionType?: string;
    name?: string;
    attributes: Attribute[];
    subSections: Section[];
    flowRules: FlowRule[];
    messages: MessageDefinition[];
}

interface Attribute {
    key: string;
    value: Value;
}

interface MessageDefinition {
    name: string;
    attributes: Attribute[];
}

interface AgentAttribute {
    key: string;
    value: SimpleValue;
}

interface Value {
    value?: string;
}

interface StringValue extends Value {
    value: string;
}

interface NumberValue extends Value {
    value: number;
}

interface BooleanValue extends Value {
    value: boolean;
}

interface NullValue extends Value {
}

interface IdentifierValue extends Value {
    value: string;
    isSpaceSeparated?: boolean;
}

interface EmbeddedExpression extends Value {
    language: string;
    content: string;
    isMultiline: boolean;
}

interface EmbeddedCodeBlock extends Value {
    language: string;
    content: string[];
}

interface SimpleValue {
    value?: string;
}

interface ParenthesesList extends SimpleValue {
    items: SimpleValue[];
}

interface InlineList extends SimpleValue {
    items: SimpleValue[];
}

interface IndentedList extends SimpleValue {
    items: SimpleValue[];
    emptyLines: string[];
}

interface BraceObject extends SimpleValue {
    pairs: ObjectPair[];
}

interface IndentedObject extends SimpleValue {
    pairs: ObjectPair[];
    emptyLines: string[];
}

interface ObjectPair {
    key: SimpleValue;
    value: SimpleValue;
}

interface AgentMessage {
    identifier?: string;
    attributes: MessageAttribute[];
    emptyLines: string[];
}

interface ContentMessage {
    attributes: MessageAttribute[];
    emptyLines: string[];
}

interface ComposeTextMessage {
    attributes: MessageAttribute[];
    emptyLines: string[];
}

interface ComposeRecordingMessage {
    attributes: MessageAttribute[];
    emptyLines: string[];
}

interface CardContent {
    attributes: MessageAttribute[];
    emptyLines: string[];
}

interface ContentInfo {
    attributes: MessageAttribute[];
    emptyLines: string[];
}

interface Media {
    attributes: MessageAttribute[];
    emptyLines: string[];
}

interface MessageAttribute {
    key: string;
    value: SimpleValue;
}

interface RichCard {
    cardType: StandaloneCard | CarouselCard;
}

interface StandaloneCard {
    attributes: CardAttribute[];
    suggestions: CardSuggestion[];
    emptyLines: string[];
}

interface CarouselCard {
    cards: StandaloneCard[];
    attributes: CardAttribute[];
    emptyLines: string[];
}

interface CardSuggestion {
    attributes: CardAttribute[];
    emptyLines: string[];
}

interface CardAttribute {
    key?: string;
    value: SimpleValue;
}

interface Suggestion {
    replyType?: SuggestedReply;
    actionType?: SuggestedAction;
}

interface SuggestedReply {
    attributes: SuggestionAttribute[];
    emptyLines: string[];
}

interface SuggestedAction {
    attributes: SuggestionAttribute[];
    actions: ActionType[];
    emptyLines: string[];
}

interface ActionType {
}

interface DialAction extends ActionType {
    attributes: SuggestionAttribute[];
    emptyLines: string[];
}

interface OpenUrlAction extends ActionType {
    attributes: SuggestionAttribute[];
    emptyLines: string[];
}

interface ShareLocationAction extends ActionType {
    attributes: SuggestionAttribute[];
    emptyLines: string[];
}

interface ViewLocationAction extends ActionType {
    attributes: SuggestionAttribute[];
    emptyLines: string[];
}

interface SaveEventAction extends ActionType {
    attributes: SuggestionAttribute[];
    emptyLines: string[];
}

interface CreateCalendarEventAction extends ActionType {
    attributes: SuggestionAttribute[];
    emptyLines: string[];
}

interface SuggestionAttribute {
    key: string;
    value: SimpleValue;
}

interface TextShortcut {
    value: SimpleValue;
}

interface RichCardShortcut {
    value: SimpleValue;
    attributes: ShortcutAttribute[];
    emptyLines: string[];
}

interface ReplyShortcut {
    value: SimpleValue;
    attributes: ShortcutAttribute[];
    emptyLines: string[];
}

interface SuggestionShortcut {
    value: SimpleValue;
    attributes: ShortcutAttribute[];
    emptyLines: string[];
}

interface MessageShortcut {
    value: SimpleValue;
    attributes: ShortcutAttribute[];
    emptyLines: string[];
}

interface FileShortcut {
    attributes: ShortcutAttribute[];
    emptyLines: string[];
}

interface RbmFileShortcut {
    attributes: ShortcutAttribute[];
    emptyLines: string[];
}

interface ShortcutAttribute {
    key?: string;
    value: SimpleValue;
}

interface ConfigProperty {
    key?: string;
    value?: SimpleValue;
}

interface DescriptionProperty extends ConfigProperty {}
interface LogoUriProperty extends ConfigProperty {}
interface HeroUriProperty extends ConfigProperty {}
interface ColorProperty extends ConfigProperty {}
interface AgentUseCaseProperty extends ConfigProperty {}
interface HostingRegionProperty extends ConfigProperty {}

interface PhoneNumberProperty extends ConfigProperty {
    attributes: ConfigPropertyAttribute[];
    emptyLines: string[];
}

interface EmailProperty extends ConfigProperty {
    attributes: ConfigPropertyAttribute[];
    emptyLines: string[];
}

interface WebsiteProperty extends ConfigProperty {
    attributes: ConfigPropertyAttribute[];
    emptyLines: string[];
}

interface PrivacyProperty extends ConfigProperty {
    attributes: ConfigPropertyAttribute[];
    emptyLines: string[];
}

interface TermsConditionsProperty extends ConfigProperty {
    attributes: ConfigPropertyAttribute[];
    emptyLines: string[];
}

interface BillingConfigProperty extends ConfigProperty {
    attributes: ConfigPropertyAttribute[];
    emptyLines: string[];
}

interface ConfigPropertyAttribute {
    key?: string;
    value: SimpleValue;
}

interface DefaultProperty {
    key?: string;
    value?: SimpleValue;
}

interface FallbackMessageProperty extends DefaultProperty {}
interface MessageTrafficTypeProperty extends DefaultProperty {}
interface TtlProperty extends DefaultProperty {}
interface PostbackDataProperty extends DefaultProperty {}

interface ExpressionsProperty extends DefaultProperty {
    attributes: DefaultPropertyAttribute[];
    emptyLines: string[];
}

interface DefaultPropertyAttribute {
    key?: string;
    value: SimpleValue;
}

interface Ref {
    refTarget: AbstractNamedSection;
}

interface TypeConversion {
    target: string;
    value: SimpleValue;
}

interface Parameter {
    name: string;
    type: string;
    value: SimpleValue;
}

interface ImportStatement {
    importedNames: string[];
    alias?: string;
    source?: string;
}

interface FlowContent {
    rules: FlowRule[];
}

interface EmbeddedCodeExpression {
    content: string;
}

interface EmbeddedCodeBlock {
    content: string[];
}

interface FlowRule {
    name: string;
    attributes: Attribute[];
    nestedRules: FlowRule[];
    transitions: FlowTransition[];
    whenClauses: WhenClause[];
}

interface FlowTransition {
    source: FlowOperand;
    destination: FlowOperand;
    withClause?: WithClause;
}

interface FlowOperand {
    operandType: string; // 'atom' | 'string' | 'identifier'
    value: string;
}

interface WhenClause {
    condition: EmbeddedExpression;
    transitions: FlowTransition[];
}

interface WithClause {
    parameters: Parameter[];
}

interface Parameter {
    name: string;
    defaultValue: Value;
}

interface FileAttribute {
    key: string;
    value: SimpleValue;
}

interface MultiLineString {
    marker: string;
    has_block_content?: string;
}

interface AgentDefinition {
    name: string;
    displayName: string;
    brandName?: string;
    config?: ConfigSection;
    defaults?: DefaultsSection;
    flows: FlowSection[];
    messages: MessagesSection;
}

interface ConfigSection {
    name: string;
    attributes: Attribute[];
}

interface DefaultsSection {
    name: string;
    attributes: Attribute[];
}

interface FlowSection {
    name: string;
    rules: FlowRule[];
}

interface MessagesSection {
    name: string;
    messages: MessageDefinition[];
}

hidden terminal SL_COMMENT: /#[^\r\n]*/;
terminal WS: /[ \t]+/;

terminal __: /[ ]+/;

terminal ATOM: /:([_a-zA-Z][\w_]*|\"[^\"\\]*\")/;
terminal STRING: /\"(\\.|[^\"\\])*\"/;
terminal NUMBER: /[0-9]{1,3}(,[0-9]{3})*(\.[0-9]+)?([eE][-+]?[0-9]+)?|[0-9]+(\.[0-9]+)?([eE][-+]?[0-9]+)?/;
terminal NL: /[\r\n]+/;

terminal INDENT: 'synthetic:indent';
terminal DEDENT: 'synthetic:dedent';

terminal TRUE_KW: /\b(True|On|Yes|Active|Enabled)\b/;
terminal FALSE_KW: /\b(False|Off|No|Inactive|Disabled)\b/;
terminal NULL_KW: /\b(Null|None|Void|null)\b/;

terminal IDENTIFIER: /[A-Z]([A-Za-z0-9-_]|(\s(?=[A-Z0-9])))*\b/;

terminal ATTRIBUTE_KEY: /[a-z][a-zA-Z0-9_]*(?=\s*:)/;

terminal SECTION_TYPE: /[a-z][a-zA-Z0-9_]*\b/;

terminal AGENT_KW: 'agent';
terminal AGENT_CONFIG_KW: 'agentConfig';
terminal AGENT_DEFAULTS_KW: 'agentDefaults';
terminal FLOW_KW: 'flow';
terminal FLOWS_KW: 'flows';
terminal MESSAGES_KW: 'messages';

terminal START_KW: 'start';
terminal WITH_KW: 'with';
terminal WHEN_KW: 'when';
terminal IF_KW: 'if';
terminal THEN_KW: 'then';
terminal ELSE_KW: 'else';
terminal UNLESS_KW: 'unless';
terminal AND_KW: 'and';
terminal OR_KW: 'or';
terminal NOT_KW: 'not';
terminal IS_KW: 'is';
terminal DO_KW: 'do';
terminal END_KW: 'end';

terminal IMPORT_KW: 'import';
terminal AS_KW: 'as';
terminal FROM_KW: 'from';

BooleanLiteral returns string: TRUE_KW | FALSE_KW;

NullLiteral returns string:
    NULL_KW;

EmptyLine returns string: __* NL;

terminal MULTILINE_STR_CLEAN: /\|(?=\s*(?:\r?\n|$))/;            // |
terminal MULTILINE_STR_TRIM: /\|-(?=\s*(?:\r?\n|$))/;            // |-
terminal MULTILINE_STR_PRESERVE: /\+\|(?=\s*(?:\r?\n|$))/;       // +|
terminal MULTILINE_STR_PRESERVE_ALL: /\+\|\+(?=\s*(?:\r?\n|$))/; // +|+

terminal EMBEDDED_CODE: /\$((js|ts)?>)\s*[^\r\n]*/;
terminal MULTI_LINE_EXPRESSION_START: /\$((js|ts)?)>>>/;
terminal CODE_LINE: /[^\r\n]*/;

MultiLineString returns MultiLineString:
    marker=(MULTILINE_STR_CLEAN | MULTILINE_STR_TRIM | MULTILINE_STR_PRESERVE | MULTILINE_STR_PRESERVE_ALL)
    has_block_content='true';

Value returns Value:
    StringValue | NumberValue | BooleanValue | NullValue | IdentifierValue | EmbeddedExpression | EmbeddedCodeBlock;

StringValue returns StringValue:
    value=STRING;

NumberValue returns NumberValue:
    value=NUMBER;

BooleanValue returns BooleanValue:
    value=(TRUE_KW | FALSE_KW);

NullValue returns NullValue:
    NULL_KW;

IdentifierValue returns IdentifierValue:
    value=IDENTIFIER;

EmbeddedExpression returns EmbeddedExpression:
    EMBEDDED_CODE;

EmbeddedCodeBlock returns EmbeddedCodeBlock:
    MULTI_LINE_EXPRESSION_START
    INDENT
    content+=(CODE_LINE | EmptyLine)*
    DEDENT;

/**
 * ImportStatement supports multi-level namespace paths and space-separated aliases.
 *
 * Example:
 *   import My Brand / Samples as Sample One
 *   import Shared / Common Flows / Support
 *
 * - Each IDENTIFIER can include spaces (e.g., "My Brand").
 * - The alias after 'as' can also be a space-separated IDENTIFIER.
 * - Optional 'from' clause for specifying source files.
 */
ImportStatement returns ImportStatement:
    IMPORT_KW importedNames+=IDENTIFIER ( __? '/' __? importedNames+=IDENTIFIER)* 
    (AS_KW alias=IDENTIFIER)? 
    (FROM_KW source=STRING)?;

terminal TYPE_TAG_NAME: /(date|datetime|dt|time|t|email|phone|msisdn|url|zipcode|zip|duration|ttl)/;
terminal ISO_DURATION_LITERAL: /P(\d+[YMWD])*T?(\d+[HMS])*|(\d+(\.\d+)?s)/;

TypeTagValue returns string: STRING | NUMBER | TRUE_KW | FALSE_KW | NULL_KW | ATOM | PROPER_NOUN | COMMON_NOUN | ISO_DURATION_LITERAL;

interface TypeTag {
    type: string;
    value: string;
    modifier?: string;
}

TypeTag returns TypeTag:
    '<' type=TYPE_TAG_NAME __ value=TypeTagValue (__? '|' __? modifier=STRING)? __?'>'; 

terminal EMBEDDED_CODE_START: /\$((js|ts)?)/;
terminal CODE_LINE: /(?:>\s)\s*[^\r\n]*/;
terminal CODE_BLOCK_START: />>>[\s\r\n]+/;

EmbeddedCodeBlock returns EmbeddedCodeBlock:
    CODE_BLOCK_START 
    INDENT
    content+=(CODE_LINE | EmptyLine)*
    DEDENT;

EmbeddedCodeExpression returns EmbeddedCodeExpression:
    EMBEDDED_CODE_START content=CODE_LINE;

SimpleValue returns SimpleValue:
    value=STRING | value=NUMBER | value=ATOM | value=BooleanLiteral | value=NullLiteral | value=PROPER_NOUN | value=COMMON_NOUN 
    | TypeTag 
    | EmbeddedCodeExpression 
    | MultiLineString
    | ParenthesesList
    | InlineList 
    | IndentedList
    | BraceObject
    | IndentedObject;

ParenthesesList returns ParenthesesList:
    '(' (items+=SimpleValue (',' items+=SimpleValue)*)? ')';

InlineList returns InlineList:
    '-' items+=SimpleValue;

IndentedList returns IndentedList:
    NL?
    INDENT
    (
        '-' items+=SimpleValue (NL | WS)?
        | emptyLines+=EmptyLine
    )*
    DEDENT;

BraceObject returns BraceObject:
    '{' (pairs+=ObjectPair (',' pairs+=ObjectPair)*)? '}';

IndentedObject returns IndentedObject:
    NL?
    INDENT
    (
        pairs+=ObjectPair (NL | WS)?
        | emptyLines+=EmptyLine
    )*
    DEDENT;

ObjectPair returns ObjectPair:
    key=SimpleValue ':' (__? | WS | NL)? value=SimpleValue;

Parameter returns Parameter:
    name=(ATTRIBUTE_KEY | IDENTIFIER) ':' defaultValue=Value; 

FlowRule returns FlowRule:
    name=IDENTIFIER ':' NL?
    INDENT?
    (
        attributes+=Attribute
        | nestedRules+=FlowRule
        | transitions+=FlowTransition
        | whenClauses+=WhenClause
    )*
    DEDENT?;

FlowTransition returns FlowTransition:
    source=FlowOperand '->' destination=FlowOperand (withClause=WithClause)?;

FlowOperand returns FlowOperand:
    ATOM | STRING | IDENTIFIER;

WhenClause returns WhenClause:
    WHEN_KW condition=EmbeddedExpression NL?
    INDENT?
    transitions+=FlowTransition*
    DEDENT?;

WithClause returns WithClause:
    WITH_KW NL?
    INDENT?
    parameters+=Parameter*
    DEDENT?;

ConfigProperty returns ConfigProperty:
    DescriptionProperty
    | LogoUriProperty  
    | HeroUriProperty
    | ColorProperty
    | AgentUseCaseProperty
    | HostingRegionProperty
    | PhoneNumberProperty
    | EmailProperty
    | WebsiteProperty  
    | PrivacyProperty
    | TermsConditionsProperty
    | BillingConfigProperty;

DescriptionProperty returns DescriptionProperty:
    {DescriptionProperty} key='description' ':' (__? | WS | NL)? value=SimpleValue;

LogoUriProperty returns LogoUriProperty:
    {LogoUriProperty} key='logoUri' ':' (__? | WS | NL)? value=SimpleValue;

HeroUriProperty returns HeroUriProperty:
    {HeroUriProperty} key='heroUri' ':' (__? | WS | NL)? value=SimpleValue;

ColorProperty returns ColorProperty:
    {ColorProperty} key='color' ':' (__? | WS | NL)? value=SimpleValue;

AgentUseCaseProperty returns AgentUseCaseProperty:
    {AgentUseCaseProperty} key='agentUseCase' ':' (__? | WS | NL)? value=SimpleValue;

HostingRegionProperty returns HostingRegionProperty:
    {HostingRegionProperty} key='hostingRegion' ':' (__? | WS | NL)? value=SimpleValue;

PhoneNumberProperty returns PhoneNumberProperty:
    {PhoneNumberProperty} key='phoneNumberEntry'
    NL?
    INDENT
    (attributes+=ConfigPropertyAttribute | emptyLines+=EmptyLine)*
    DEDENT;

EmailProperty returns EmailProperty:
    {EmailProperty} key='emailEntry'
    NL?
    INDENT
    (attributes+=ConfigPropertyAttribute | emptyLines+=EmptyLine)*
    DEDENT;

WebsiteProperty returns WebsiteProperty:
    {WebsiteProperty} key='websiteEntry'
    NL?
    INDENT
    (attributes+=ConfigPropertyAttribute | emptyLines+=EmptyLine)*
    DEDENT;

PrivacyProperty returns PrivacyProperty:
    {PrivacyProperty} key='privacy'
    NL?
    INDENT
    (attributes+=ConfigPropertyAttribute | emptyLines+=EmptyLine)*
    DEDENT;

TermsConditionsProperty returns TermsConditionsProperty:
    {TermsConditionsProperty} key='termsConditions'
    NL?
    INDENT
    (attributes+=ConfigPropertyAttribute | emptyLines+=EmptyLine)*
    DEDENT;

BillingConfigProperty returns BillingConfigProperty:
    {BillingConfigProperty} key='billingConfig'
    NL?
    INDENT
    (attributes+=ConfigPropertyAttribute | emptyLines+=EmptyLine)*
    DEDENT;

ConfigPropertyAttribute returns ConfigPropertyAttribute:
    {ConfigPropertyAttribute} key=('number' | 'address' | 'url' | 'label' | 'billingCategory') ':' __ value=SimpleValue;

DefaultProperty returns DefaultProperty:
    FallbackMessageProperty
    | MessageTrafficTypeProperty
    | TtlProperty
    | PostbackDataProperty
    | ExpressionsProperty;

FallbackMessageProperty returns FallbackMessageProperty:
    {FallbackMessageProperty} key='fallback_message' ':' __ value=SimpleValue;

MessageTrafficTypeProperty returns MessageTrafficTypeProperty:
    {MessageTrafficTypeProperty} key='messageTrafficType' ':' __ value=SimpleValue;

TtlProperty returns TtlProperty:
    {TtlProperty} key='ttl' ':' __ value=SimpleValue;

PostbackDataProperty returns PostbackDataProperty:
    {PostbackDataProperty} key='postbackData' ':' __ value=SimpleValue;

ExpressionsProperty returns ExpressionsProperty:
    {ExpressionsProperty} key='expressions'
    NL?
    INDENT
    (attributes+=DefaultPropertyAttribute | emptyLines+=EmptyLine)*
    DEDENT;

DefaultPropertyAttribute returns DefaultPropertyAttribute:
    {DefaultPropertyAttribute} key='language' ':' __ value=SimpleValue; 

AgentDefinition returns AgentDefinition:
    'agent' name=IDENTIFIER ':'
    NL? INDENT
    'displayName' ':' displayName=STRING NL?
    ('brandName' ':' brandName=STRING NL?)?
    (config=ConfigSection)?
    (defaults=DefaultsSection)?
    (flows+=FlowSection)+
    messages=MessagesSection
    DEDENT;

ConfigSection returns ConfigSection:
    'agentConfig' name=IDENTIFIER ':'
    NL? INDENT
    attributes+=Attribute*
    DEDENT;

DefaultsSection returns DefaultsSection:
    'agentDefaults' name=IDENTIFIER ':'
    NL? INDENT
    attributes+=Attribute*
    DEDENT;

FlowSection returns FlowSection:
    'flow' name=IDENTIFIER ':'
    NL? INDENT
    rules+=FlowRule*
    DEDENT;

MessagesSection returns MessagesSection:
    'messages' name=IDENTIFIER ':'
    NL? INDENT
    messages+=MessageDefinition*
    DEDENT;

SectionType returns string:
  AGENT_KW
  | AGENT_CONFIG_KW
  | AGENT_DEFAULTS_KW
  | FLOW_KW
  | FLOWS_KW
  | MESSAGES_KW;

Section returns Section:
    sectionType=SectionType (name=IDENTIFIER)? ':'
    NL?
    INDENT?
    (
        attributes+=Attribute 
        | subSections+=Section
        | flowRules+=FlowRule
        | messages+=MessageDefinition
        | emptyLines+=EmptyLine
    )*
    DEDENT?;

Attribute returns Attribute:
    key=ATTRIBUTE_KEY ':' (__? | WS)? value=Value;

MessageDefinition returns MessageDefinition:
    name=IDENTIFIER ':' NL?
    INDENT?
    attributes+=Attribute*
    DEDENT?;

AgentMessage returns AgentMessage:
    'agentMessage' identifier=PROPER_NOUN?
    NL?
    INDENT
    (attributes+=MessageAttribute | emptyLines+=EmptyLine)*
    DEDENT;

ContentMessage returns ContentMessage:
    'contentMessage'
    NL?
    INDENT
    (attributes+=MessageAttribute | emptyLines+=EmptyLine)*
    DEDENT;

ComposeTextMessage returns ComposeTextMessage:
    'composeTextMessage'
    NL?
    INDENT
    (attributes+=MessageAttribute | emptyLines+=EmptyLine)*
    DEDENT;

ComposeRecordingMessage returns ComposeRecordingMessage:
    'composeRecordingMessage'
    NL?
    INDENT
    (attributes+=MessageAttribute | emptyLines+=EmptyLine)*
    DEDENT;

CardContent returns CardContent:
    'cardContent'
    NL?
    INDENT
    (attributes+=MessageAttribute | emptyLines+=EmptyLine)*
    DEDENT;

ContentInfo returns ContentInfo:
    'contentInfo'
    NL?
    INDENT
    (attributes+=MessageAttribute | emptyLines+=EmptyLine)*
    DEDENT;

Media returns Media:
    'media'
    NL?
    INDENT
    (attributes+=MessageAttribute | emptyLines+=EmptyLine)*
    DEDENT;

MessageAttribute returns MessageAttribute:
    key=COMMON_NOUN ':' (__? | WS | NL)? value=SimpleValue; 

RichCard returns RichCard:
    'richCard'
    NL?
    INDENT
    (cardType=StandaloneCard | cardType=CarouselCard)
    DEDENT;

StandaloneCard returns StandaloneCard:
    'standaloneCard'
    NL?
    INDENT
    (attributes+=CardAttribute | suggestions+=CardSuggestion | emptyLines+=EmptyLine)*
    DEDENT;

CarouselCard returns CarouselCard:
    'carouselCard'
    NL?
    INDENT
    (cards+=StandaloneCard | attributes+=CardAttribute | emptyLines+=EmptyLine)*
    DEDENT;

CardSuggestion returns CardSuggestion:
    'cardSuggestion'
    NL?
    INDENT
    (attributes+=CardAttribute | emptyLines+=EmptyLine)*
    DEDENT;

CardAttribute returns CardAttribute:
    key=('title' | 'description' | 'thumbnail' | 'height' | 'orientation') ':' (__? | WS | NL)? value=SimpleValue
    | key=COMMON_NOUN ':' (__? | WS | NL)? value=SimpleValue; 

Suggestion returns Suggestion:
    'suggestion'
    NL?
    INDENT
    (replyType=SuggestedReply | actionType=SuggestedAction)
    DEDENT;

SuggestedReply returns SuggestedReply:
    'reply' __ 'suggestedReply'
    NL?
    INDENT
    (attributes+=SuggestionAttribute | emptyLines+=EmptyLine)*
    DEDENT;

SuggestedAction returns SuggestedAction:
    'action' __ 'suggestedAction'
    NL?
    INDENT
    (attributes+=SuggestionAttribute | actions+=ActionType | emptyLines+=EmptyLine)*
    DEDENT;

DialAction returns DialAction:
    'dial'
    NL?
    INDENT
    (attributes+=SuggestionAttribute | emptyLines+=EmptyLine)*
    DEDENT;

OpenUrlAction returns OpenUrlAction:
    'openUrl'
    NL?
    INDENT
    (attributes+=SuggestionAttribute | emptyLines+=EmptyLine)*
    DEDENT;

ShareLocationAction returns ShareLocationAction:
    'shareLocation'
    NL?
    INDENT
    (attributes+=SuggestionAttribute | emptyLines+=EmptyLine)*
    DEDENT;

ViewLocationAction returns ViewLocationAction:
    'viewLocation'
    NL?
    INDENT
    (attributes+=SuggestionAttribute | emptyLines+=EmptyLine)*
    DEDENT;

SaveEventAction returns SaveEventAction:
    'saveEvent'
    NL?
    INDENT
    (attributes+=SuggestionAttribute | emptyLines+=EmptyLine)*
    DEDENT;

CreateCalendarEventAction returns CreateCalendarEventAction:
    'createCalendarEvent'
    NL?
    INDENT
    (attributes+=SuggestionAttribute | emptyLines+=EmptyLine)*
    DEDENT;

ActionType returns ActionType:
    DialAction | OpenUrlAction | ShareLocationAction | ViewLocationAction | SaveEventAction | CreateCalendarEventAction;

SuggestionAttribute returns SuggestionAttribute:
    key=COMMON_NOUN ':' (__* | NL)? value=SimpleValue;

TextShortcut returns TextShortcut:
    'text' __ value=SimpleValue;

RichCardShortcut returns RichCardShortcut:
    'richCard' __ value=SimpleValue
    NL?
    (
        INDENT
        (attributes+=ShortcutAttribute | emptyLines+=EmptyLine)*
        DEDENT
    )?;

ReplyShortcut returns ReplyShortcut:
    'replyShortcut' __ value=SimpleValue
    NL?
    (
        INDENT
        (attributes+=ShortcutAttribute | emptyLines+=EmptyLine)*
        DEDENT
    )?;

SuggestionShortcut returns SuggestionShortcut:
    'suggestionShortcut' __ value=SimpleValue
    NL?
    (
        INDENT
        (attributes+=ShortcutAttribute | emptyLines+=EmptyLine)*
        DEDENT
    )?;

MessageShortcut returns MessageShortcut:
    'messageShortcut' __ value=SimpleValue
    NL?
    (
        INDENT
        (attributes+=ShortcutAttribute | emptyLines+=EmptyLine)*
        DEDENT
    )?;

FileShortcut returns FileShortcut:
    'file'
    NL?
    (
        INDENT
        (attributes+=ShortcutAttribute | emptyLines+=EmptyLine)*
        DEDENT
    )?;

FileAttribute returns FileAttribute:
    key=('filename' | 'thumbnailUrl' | 'fileUrl') ':' (__? | WS | NL)? value=SimpleValue
    | key=COMMON_NOUN ':' (__? | WS | NL)? value=SimpleValue;

ShortcutAttribute returns ShortcutAttribute:
    key=('filename' | 'thumbnailUrl' | 'fileUrl') ':' (__? | WS | NL)? value=SimpleValue
    | key=COMMON_NOUN ':' (__? | WS | NL)? value=SimpleValue; 

entry RclFile:
    (imports+=ImportStatement)*
    agentDefinition=AgentDefinition;

