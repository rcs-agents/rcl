/**
 * Grammar Comparison Tests
 * 
 * Tests that compare grammars generated by tmgrammar-toolkit with those 
 * generated by the original tmlanguage-generator package.
 */

import { describe, test, expect, beforeAll } from 'vitest';
import { createGrammar } from '../src/index.js';
import { readFile } from 'node:fs/promises';
import { resolve } from 'node:path';
import { fileURLToPath } from 'node:url';
import { dirname } from 'node:path';

import { grammar as bicepGrammar } from '../examples/tmgrammar-toolkit/bicep.ts';
import { grammar as typespecGrammar } from '../examples/tmgrammar-toolkit/typespec.ts';
import { emitJSON } from '../src/emit.js';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

describe('Grammar Comparison Tests', () => {
  const fixturesPath = resolve(__dirname, 'fixtures/grammar-comparison');
  
  let originalBicepGrammar: any;
  let originalTypespecGrammar: any;
  let textmateToolkitBicepGrammar: any;
  let textmateToolkitTypespecGrammar: any;

  beforeAll(async () => {
    // Load original tmlanguage JSON files
    const bicepJsonPath = resolve(fixturesPath, 'bicep.tmlanguage.json');
    const typespecJsonPath = resolve(fixturesPath, 'typescpec.tmlanguage.json'); // Note: original has typo
    
    const bicepJson = await readFile(bicepJsonPath, 'utf-8');
    const typespecJson = await readFile(typespecJsonPath, 'utf-8');
    
    originalBicepGrammar = JSON.parse(bicepJson);
    originalTypespecGrammar = JSON.parse(typespecJson);
    
    // Generate tmgrammar-toolkit outputs using emitJSON
    const bicepGrammarJson = await emitJSON(bicepGrammar);
    const typespecGrammarJson = await emitJSON(typespecGrammar);
    
    textmateToolkitBicepGrammar = JSON.parse(bicepGrammarJson);
    textmateToolkitTypespecGrammar = JSON.parse(typespecGrammarJson);
  });

  describe('Bicep Grammar Comparison', () => {
    it('should match the snapshot', () => {
      expect(textmateToolkitBicepGrammar).toMatchSnapshot();
    });
  });

  describe('TypeSpec Grammar Comparison', () => {
    it('should match the snapshot', () => {
      expect(textmateToolkitTypespecGrammar).toMatchSnapshot();
    });
  });
}); 